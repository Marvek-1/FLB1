# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NodeHealthStatusNodes(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, node_id: str=None, status: str=None, last_heartbeat: datetime=None, capabilities: List[str]=None):  # noqa: E501
        """NodeHealthStatusNodes - a model defined in Swagger

        :param node_id: The node_id of this NodeHealthStatusNodes.  # noqa: E501
        :type node_id: str
        :param status: The status of this NodeHealthStatusNodes.  # noqa: E501
        :type status: str
        :param last_heartbeat: The last_heartbeat of this NodeHealthStatusNodes.  # noqa: E501
        :type last_heartbeat: datetime
        :param capabilities: The capabilities of this NodeHealthStatusNodes.  # noqa: E501
        :type capabilities: List[str]
        """
        self.swagger_types = {
            'node_id': str,
            'status': str,
            'last_heartbeat': datetime,
            'capabilities': List[str]
        }

        self.attribute_map = {
            'node_id': 'node_id',
            'status': 'status',
            'last_heartbeat': 'last_heartbeat',
            'capabilities': 'capabilities'
        }
        self._node_id = node_id
        self._status = status
        self._last_heartbeat = last_heartbeat
        self._capabilities = capabilities

    @classmethod
    def from_dict(cls, dikt) -> 'NodeHealthStatusNodes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeHealthStatus_nodes of this NodeHealthStatusNodes.  # noqa: E501
        :rtype: NodeHealthStatusNodes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self) -> str:
        """Gets the node_id of this NodeHealthStatusNodes.


        :return: The node_id of this NodeHealthStatusNodes.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this NodeHealthStatusNodes.


        :param node_id: The node_id of this NodeHealthStatusNodes.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def status(self) -> str:
        """Gets the status of this NodeHealthStatusNodes.


        :return: The status of this NodeHealthStatusNodes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this NodeHealthStatusNodes.


        :param status: The status of this NodeHealthStatusNodes.
        :type status: str
        """
        allowed_values = ["active", "inactive", "training", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def last_heartbeat(self) -> datetime:
        """Gets the last_heartbeat of this NodeHealthStatusNodes.


        :return: The last_heartbeat of this NodeHealthStatusNodes.
        :rtype: datetime
        """
        return self._last_heartbeat

    @last_heartbeat.setter
    def last_heartbeat(self, last_heartbeat: datetime):
        """Sets the last_heartbeat of this NodeHealthStatusNodes.


        :param last_heartbeat: The last_heartbeat of this NodeHealthStatusNodes.
        :type last_heartbeat: datetime
        """

        self._last_heartbeat = last_heartbeat

    @property
    def capabilities(self) -> List[str]:
        """Gets the capabilities of this NodeHealthStatusNodes.


        :return: The capabilities of this NodeHealthStatusNodes.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities: List[str]):
        """Sets the capabilities of this NodeHealthStatusNodes.


        :param capabilities: The capabilities of this NodeHealthStatusNodes.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities
