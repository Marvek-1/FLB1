# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.chat_message import ChatMessage  # noqa: F401,E501
from swagger_server.models.chatcompletions_response_format import ChatcompletionsResponseFormat  # noqa: F401,E501
from swagger_server import util


class ChatCompletionsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model: str=None, messages: List[ChatMessage]=None, max_tokens: int=None, response_format: ChatcompletionsResponseFormat=None):  # noqa: E501
        """ChatCompletionsBody - a model defined in Swagger

        :param model: The model of this ChatCompletionsBody.  # noqa: E501
        :type model: str
        :param messages: The messages of this ChatCompletionsBody.  # noqa: E501
        :type messages: List[ChatMessage]
        :param max_tokens: The max_tokens of this ChatCompletionsBody.  # noqa: E501
        :type max_tokens: int
        :param response_format: The response_format of this ChatCompletionsBody.  # noqa: E501
        :type response_format: ChatcompletionsResponseFormat
        """
        self.swagger_types = {
            'model': str,
            'messages': List[ChatMessage],
            'max_tokens': int,
            'response_format': ChatcompletionsResponseFormat
        }

        self.attribute_map = {
            'model': 'model',
            'messages': 'messages',
            'max_tokens': 'max_tokens',
            'response_format': 'response_format'
        }
        self._model = model
        self._messages = messages
        self._max_tokens = max_tokens
        self._response_format = response_format

    @classmethod
    def from_dict(cls, dikt) -> 'ChatCompletionsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The chat_completions_body of this ChatCompletionsBody.  # noqa: E501
        :rtype: ChatCompletionsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self) -> str:
        """Gets the model of this ChatCompletionsBody.


        :return: The model of this ChatCompletionsBody.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this ChatCompletionsBody.


        :param model: The model of this ChatCompletionsBody.
        :type model: str
        """
        allowed_values = ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def messages(self) -> List[ChatMessage]:
        """Gets the messages of this ChatCompletionsBody.


        :return: The messages of this ChatCompletionsBody.
        :rtype: List[ChatMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: List[ChatMessage]):
        """Sets the messages of this ChatCompletionsBody.


        :param messages: The messages of this ChatCompletionsBody.
        :type messages: List[ChatMessage]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")  # noqa: E501

        self._messages = messages

    @property
    def max_tokens(self) -> int:
        """Gets the max_tokens of this ChatCompletionsBody.


        :return: The max_tokens of this ChatCompletionsBody.
        :rtype: int
        """
        return self._max_tokens

    @max_tokens.setter
    def max_tokens(self, max_tokens: int):
        """Sets the max_tokens of this ChatCompletionsBody.


        :param max_tokens: The max_tokens of this ChatCompletionsBody.
        :type max_tokens: int
        """

        self._max_tokens = max_tokens

    @property
    def response_format(self) -> ChatcompletionsResponseFormat:
        """Gets the response_format of this ChatCompletionsBody.


        :return: The response_format of this ChatCompletionsBody.
        :rtype: ChatcompletionsResponseFormat
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format: ChatcompletionsResponseFormat):
        """Sets the response_format of this ChatCompletionsBody.


        :param response_format: The response_format of this ChatCompletionsBody.
        :type response_format: ChatcompletionsResponseFormat
        """

        self._response_format = response_format
