# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dashboard_layout_position import DashboardLayoutPosition  # noqa: F401,E501
from swagger_server import util


class DashboardLayoutWidgets(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, type: str=None, position: DashboardLayoutPosition=None, config: object=None):  # noqa: E501
        """DashboardLayoutWidgets - a model defined in Swagger

        :param id: The id of this DashboardLayoutWidgets.  # noqa: E501
        :type id: str
        :param type: The type of this DashboardLayoutWidgets.  # noqa: E501
        :type type: str
        :param position: The position of this DashboardLayoutWidgets.  # noqa: E501
        :type position: DashboardLayoutPosition
        :param config: The config of this DashboardLayoutWidgets.  # noqa: E501
        :type config: object
        """
        self.swagger_types = {
            'id': str,
            'type': str,
            'position': DashboardLayoutPosition,
            'config': object
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'position': 'position',
            'config': 'config'
        }
        self._id = id
        self._type = type
        self._position = position
        self._config = config

    @classmethod
    def from_dict(cls, dikt) -> 'DashboardLayoutWidgets':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DashboardLayout_widgets of this DashboardLayoutWidgets.  # noqa: E501
        :rtype: DashboardLayoutWidgets
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DashboardLayoutWidgets.


        :return: The id of this DashboardLayoutWidgets.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DashboardLayoutWidgets.


        :param id: The id of this DashboardLayoutWidgets.
        :type id: str
        """

        self._id = id

    @property
    def type(self) -> str:
        """Gets the type of this DashboardLayoutWidgets.


        :return: The type of this DashboardLayoutWidgets.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this DashboardLayoutWidgets.


        :param type: The type of this DashboardLayoutWidgets.
        :type type: str
        """
        allowed_values = ["chart", "map", "table", "metric", "alert"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def position(self) -> DashboardLayoutPosition:
        """Gets the position of this DashboardLayoutWidgets.


        :return: The position of this DashboardLayoutWidgets.
        :rtype: DashboardLayoutPosition
        """
        return self._position

    @position.setter
    def position(self, position: DashboardLayoutPosition):
        """Sets the position of this DashboardLayoutWidgets.


        :param position: The position of this DashboardLayoutWidgets.
        :type position: DashboardLayoutPosition
        """

        self._position = position

    @property
    def config(self) -> object:
        """Gets the config of this DashboardLayoutWidgets.


        :return: The config of this DashboardLayoutWidgets.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config: object):
        """Sets the config of this DashboardLayoutWidgets.


        :param config: The config of this DashboardLayoutWidgets.
        :type config: object
        """

        self._config = config
