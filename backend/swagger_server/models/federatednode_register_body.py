# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FederatednodeRegisterBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, node_id: str=None, model_type: str=None, capabilities: List[str]=None):  # noqa: E501
        """FederatednodeRegisterBody - a model defined in Swagger

        :param node_id: The node_id of this FederatednodeRegisterBody.  # noqa: E501
        :type node_id: str
        :param model_type: The model_type of this FederatednodeRegisterBody.  # noqa: E501
        :type model_type: str
        :param capabilities: The capabilities of this FederatednodeRegisterBody.  # noqa: E501
        :type capabilities: List[str]
        """
        self.swagger_types = {
            'node_id': str,
            'model_type': str,
            'capabilities': List[str]
        }

        self.attribute_map = {
            'node_id': 'node_id',
            'model_type': 'model_type',
            'capabilities': 'capabilities'
        }
        self._node_id = node_id
        self._model_type = model_type
        self._capabilities = capabilities

    @classmethod
    def from_dict(cls, dikt) -> 'FederatednodeRegisterBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The federatednode_register_body of this FederatednodeRegisterBody.  # noqa: E501
        :rtype: FederatednodeRegisterBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self) -> str:
        """Gets the node_id of this FederatednodeRegisterBody.


        :return: The node_id of this FederatednodeRegisterBody.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this FederatednodeRegisterBody.


        :param node_id: The node_id of this FederatednodeRegisterBody.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def model_type(self) -> str:
        """Gets the model_type of this FederatednodeRegisterBody.


        :return: The model_type of this FederatednodeRegisterBody.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type: str):
        """Sets the model_type of this FederatednodeRegisterBody.


        :param model_type: The model_type of this FederatednodeRegisterBody.
        :type model_type: str
        """
        if model_type is None:
            raise ValueError("Invalid value for `model_type`, must not be `None`")  # noqa: E501

        self._model_type = model_type

    @property
    def capabilities(self) -> List[str]:
        """Gets the capabilities of this FederatednodeRegisterBody.


        :return: The capabilities of this FederatednodeRegisterBody.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities: List[str]):
        """Sets the capabilities of this FederatednodeRegisterBody.


        :param capabilities: The capabilities of this FederatednodeRegisterBody.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities
