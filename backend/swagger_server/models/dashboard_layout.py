# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dashboard_layout_widgets import DashboardLayoutWidgets  # noqa: F401,E501
from swagger_server import util


class DashboardLayout(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, widgets: List[DashboardLayoutWidgets]=None, theme: str=None, auto_refresh: bool=None, refresh_interval: int=None):  # noqa: E501
        """DashboardLayout - a model defined in Swagger

        :param widgets: The widgets of this DashboardLayout.  # noqa: E501
        :type widgets: List[DashboardLayoutWidgets]
        :param theme: The theme of this DashboardLayout.  # noqa: E501
        :type theme: str
        :param auto_refresh: The auto_refresh of this DashboardLayout.  # noqa: E501
        :type auto_refresh: bool
        :param refresh_interval: The refresh_interval of this DashboardLayout.  # noqa: E501
        :type refresh_interval: int
        """
        self.swagger_types = {
            'widgets': List[DashboardLayoutWidgets],
            'theme': str,
            'auto_refresh': bool,
            'refresh_interval': int
        }

        self.attribute_map = {
            'widgets': 'widgets',
            'theme': 'theme',
            'auto_refresh': 'auto_refresh',
            'refresh_interval': 'refresh_interval'
        }
        self._widgets = widgets
        self._theme = theme
        self._auto_refresh = auto_refresh
        self._refresh_interval = refresh_interval

    @classmethod
    def from_dict(cls, dikt) -> 'DashboardLayout':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DashboardLayout of this DashboardLayout.  # noqa: E501
        :rtype: DashboardLayout
        """
        return util.deserialize_model(dikt, cls)

    @property
    def widgets(self) -> List[DashboardLayoutWidgets]:
        """Gets the widgets of this DashboardLayout.


        :return: The widgets of this DashboardLayout.
        :rtype: List[DashboardLayoutWidgets]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets: List[DashboardLayoutWidgets]):
        """Sets the widgets of this DashboardLayout.


        :param widgets: The widgets of this DashboardLayout.
        :type widgets: List[DashboardLayoutWidgets]
        """

        self._widgets = widgets

    @property
    def theme(self) -> str:
        """Gets the theme of this DashboardLayout.


        :return: The theme of this DashboardLayout.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme: str):
        """Sets the theme of this DashboardLayout.


        :param theme: The theme of this DashboardLayout.
        :type theme: str
        """
        allowed_values = ["light", "dark", "auto"]  # noqa: E501
        if theme not in allowed_values:
            raise ValueError(
                "Invalid value for `theme` ({0}), must be one of {1}"
                .format(theme, allowed_values)
            )

        self._theme = theme

    @property
    def auto_refresh(self) -> bool:
        """Gets the auto_refresh of this DashboardLayout.


        :return: The auto_refresh of this DashboardLayout.
        :rtype: bool
        """
        return self._auto_refresh

    @auto_refresh.setter
    def auto_refresh(self, auto_refresh: bool):
        """Sets the auto_refresh of this DashboardLayout.


        :param auto_refresh: The auto_refresh of this DashboardLayout.
        :type auto_refresh: bool
        """

        self._auto_refresh = auto_refresh

    @property
    def refresh_interval(self) -> int:
        """Gets the refresh_interval of this DashboardLayout.


        :return: The refresh_interval of this DashboardLayout.
        :rtype: int
        """
        return self._refresh_interval

    @refresh_interval.setter
    def refresh_interval(self, refresh_interval: int):
        """Sets the refresh_interval of this DashboardLayout.


        :param refresh_interval: The refresh_interval of this DashboardLayout.
        :type refresh_interval: int
        """

        self._refresh_interval = refresh_interval
