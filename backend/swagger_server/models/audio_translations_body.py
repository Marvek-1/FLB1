# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AudioTranslationsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, file: str=None, model: str=None, prompt: str=None, response_format: str='json'):  # noqa: E501
        """AudioTranslationsBody - a model defined in Swagger

        :param file: The file of this AudioTranslationsBody.  # noqa: E501
        :type file: str
        :param model: The model of this AudioTranslationsBody.  # noqa: E501
        :type model: str
        :param prompt: The prompt of this AudioTranslationsBody.  # noqa: E501
        :type prompt: str
        :param response_format: The response_format of this AudioTranslationsBody.  # noqa: E501
        :type response_format: str
        """
        self.swagger_types = {
            'file': str,
            'model': str,
            'prompt': str,
            'response_format': str
        }

        self.attribute_map = {
            'file': 'file',
            'model': 'model',
            'prompt': 'prompt',
            'response_format': 'response_format'
        }
        self._file = file
        self._model = model
        self._prompt = prompt
        self._response_format = response_format

    @classmethod
    def from_dict(cls, dikt) -> 'AudioTranslationsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The audio_translations_body of this AudioTranslationsBody.  # noqa: E501
        :rtype: AudioTranslationsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file(self) -> str:
        """Gets the file of this AudioTranslationsBody.


        :return: The file of this AudioTranslationsBody.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file: str):
        """Sets the file of this AudioTranslationsBody.


        :param file: The file of this AudioTranslationsBody.
        :type file: str
        """
        if file is None:
            raise ValueError("Invalid value for `file`, must not be `None`")  # noqa: E501

        self._file = file

    @property
    def model(self) -> str:
        """Gets the model of this AudioTranslationsBody.


        :return: The model of this AudioTranslationsBody.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this AudioTranslationsBody.


        :param model: The model of this AudioTranslationsBody.
        :type model: str
        """
        allowed_values = ["whisper-1"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def prompt(self) -> str:
        """Gets the prompt of this AudioTranslationsBody.


        :return: The prompt of this AudioTranslationsBody.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt: str):
        """Sets the prompt of this AudioTranslationsBody.


        :param prompt: The prompt of this AudioTranslationsBody.
        :type prompt: str
        """

        self._prompt = prompt

    @property
    def response_format(self) -> str:
        """Gets the response_format of this AudioTranslationsBody.


        :return: The response_format of this AudioTranslationsBody.
        :rtype: str
        """
        return self._response_format

    @response_format.setter
    def response_format(self, response_format: str):
        """Sets the response_format of this AudioTranslationsBody.


        :param response_format: The response_format of this AudioTranslationsBody.
        :type response_format: str
        """
        allowed_values = ["json", "text", "srt", "verbose_json", "vtt"]  # noqa: E501
        if response_format not in allowed_values:
            raise ValueError(
                "Invalid value for `response_format` ({0}), must be one of {1}"
                .format(response_format, allowed_values)
            )

        self._response_format = response_format
