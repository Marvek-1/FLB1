# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.chat_message_function_call import ChatMessageFunctionCall  # noqa: F401,E501
from swagger_server.models.one_of_chat_message_content import OneOfChatMessageContent  # noqa: F401,E501
from swagger_server import util


class ChatMessage(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, role: str=None, content: OneOfChatMessageContent=None, name: str=None, function_call: ChatMessageFunctionCall=None):  # noqa: E501
        """ChatMessage - a model defined in Swagger

        :param role: The role of this ChatMessage.  # noqa: E501
        :type role: str
        :param content: The content of this ChatMessage.  # noqa: E501
        :type content: OneOfChatMessageContent
        :param name: The name of this ChatMessage.  # noqa: E501
        :type name: str
        :param function_call: The function_call of this ChatMessage.  # noqa: E501
        :type function_call: ChatMessageFunctionCall
        """
        self.swagger_types = {
            'role': str,
            'content': OneOfChatMessageContent,
            'name': str,
            'function_call': ChatMessageFunctionCall
        }

        self.attribute_map = {
            'role': 'role',
            'content': 'content',
            'name': 'name',
            'function_call': 'function_call'
        }
        self._role = role
        self._content = content
        self._name = name
        self._function_call = function_call

    @classmethod
    def from_dict(cls, dikt) -> 'ChatMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatMessage of this ChatMessage.  # noqa: E501
        :rtype: ChatMessage
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self) -> str:
        """Gets the role of this ChatMessage.


        :return: The role of this ChatMessage.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this ChatMessage.


        :param role: The role of this ChatMessage.
        :type role: str
        """
        allowed_values = ["system", "user", "assistant", "function"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def content(self) -> OneOfChatMessageContent:
        """Gets the content of this ChatMessage.


        :return: The content of this ChatMessage.
        :rtype: OneOfChatMessageContent
        """
        return self._content

    @content.setter
    def content(self, content: OneOfChatMessageContent):
        """Sets the content of this ChatMessage.


        :param content: The content of this ChatMessage.
        :type content: OneOfChatMessageContent
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def name(self) -> str:
        """Gets the name of this ChatMessage.


        :return: The name of this ChatMessage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ChatMessage.


        :param name: The name of this ChatMessage.
        :type name: str
        """

        self._name = name

    @property
    def function_call(self) -> ChatMessageFunctionCall:
        """Gets the function_call of this ChatMessage.


        :return: The function_call of this ChatMessage.
        :rtype: ChatMessageFunctionCall
        """
        return self._function_call

    @function_call.setter
    def function_call(self, function_call: ChatMessageFunctionCall):
        """Sets the function_call of this ChatMessage.


        :param function_call: The function_call of this ChatMessage.
        :type function_call: ChatMessageFunctionCall
        """

        self._function_call = function_call
