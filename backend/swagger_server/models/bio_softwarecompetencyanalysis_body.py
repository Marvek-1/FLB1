# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BioSoftwarecompetencyanalysisBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, student_id: str=None, tools_used: List[str]=None, usage_metrics: object=None):  # noqa: E501
        """BioSoftwarecompetencyanalysisBody - a model defined in Swagger

        :param student_id: The student_id of this BioSoftwarecompetencyanalysisBody.  # noqa: E501
        :type student_id: str
        :param tools_used: The tools_used of this BioSoftwarecompetencyanalysisBody.  # noqa: E501
        :type tools_used: List[str]
        :param usage_metrics: The usage_metrics of this BioSoftwarecompetencyanalysisBody.  # noqa: E501
        :type usage_metrics: object
        """
        self.swagger_types = {
            'student_id': str,
            'tools_used': List[str],
            'usage_metrics': object
        }

        self.attribute_map = {
            'student_id': 'student_id',
            'tools_used': 'tools_used',
            'usage_metrics': 'usage_metrics'
        }
        self._student_id = student_id
        self._tools_used = tools_used
        self._usage_metrics = usage_metrics

    @classmethod
    def from_dict(cls, dikt) -> 'BioSoftwarecompetencyanalysisBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The bio_softwarecompetencyanalysis_body of this BioSoftwarecompetencyanalysisBody.  # noqa: E501
        :rtype: BioSoftwarecompetencyanalysisBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def student_id(self) -> str:
        """Gets the student_id of this BioSoftwarecompetencyanalysisBody.


        :return: The student_id of this BioSoftwarecompetencyanalysisBody.
        :rtype: str
        """
        return self._student_id

    @student_id.setter
    def student_id(self, student_id: str):
        """Sets the student_id of this BioSoftwarecompetencyanalysisBody.


        :param student_id: The student_id of this BioSoftwarecompetencyanalysisBody.
        :type student_id: str
        """

        self._student_id = student_id

    @property
    def tools_used(self) -> List[str]:
        """Gets the tools_used of this BioSoftwarecompetencyanalysisBody.


        :return: The tools_used of this BioSoftwarecompetencyanalysisBody.
        :rtype: List[str]
        """
        return self._tools_used

    @tools_used.setter
    def tools_used(self, tools_used: List[str]):
        """Sets the tools_used of this BioSoftwarecompetencyanalysisBody.


        :param tools_used: The tools_used of this BioSoftwarecompetencyanalysisBody.
        :type tools_used: List[str]
        """

        self._tools_used = tools_used

    @property
    def usage_metrics(self) -> object:
        """Gets the usage_metrics of this BioSoftwarecompetencyanalysisBody.


        :return: The usage_metrics of this BioSoftwarecompetencyanalysisBody.
        :rtype: object
        """
        return self._usage_metrics

    @usage_metrics.setter
    def usage_metrics(self, usage_metrics: object):
        """Sets the usage_metrics of this BioSoftwarecompetencyanalysisBody.


        :param usage_metrics: The usage_metrics of this BioSoftwarecompetencyanalysisBody.
        :type usage_metrics: object
        """

        self._usage_metrics = usage_metrics
