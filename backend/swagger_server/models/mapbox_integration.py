# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MapboxIntegration(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, api_key: str=None, map_style: str=None, features: List[str]=None):  # noqa: E501
        """MapboxIntegration - a model defined in Swagger

        :param api_key: The api_key of this MapboxIntegration.  # noqa: E501
        :type api_key: str
        :param map_style: The map_style of this MapboxIntegration.  # noqa: E501
        :type map_style: str
        :param features: The features of this MapboxIntegration.  # noqa: E501
        :type features: List[str]
        """
        self.swagger_types = {
            'api_key': str,
            'map_style': str,
            'features': List[str]
        }

        self.attribute_map = {
            'api_key': 'api_key',
            'map_style': 'map_style',
            'features': 'features'
        }
        self._api_key = api_key
        self._map_style = map_style
        self._features = features

    @classmethod
    def from_dict(cls, dikt) -> 'MapboxIntegration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MapboxIntegration of this MapboxIntegration.  # noqa: E501
        :rtype: MapboxIntegration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self) -> str:
        """Gets the api_key of this MapboxIntegration.


        :return: The api_key of this MapboxIntegration.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key: str):
        """Sets the api_key of this MapboxIntegration.


        :param api_key: The api_key of this MapboxIntegration.
        :type api_key: str
        """

        self._api_key = api_key

    @property
    def map_style(self) -> str:
        """Gets the map_style of this MapboxIntegration.


        :return: The map_style of this MapboxIntegration.
        :rtype: str
        """
        return self._map_style

    @map_style.setter
    def map_style(self, map_style: str):
        """Sets the map_style of this MapboxIntegration.


        :param map_style: The map_style of this MapboxIntegration.
        :type map_style: str
        """
        allowed_values = ["streets", "outdoors", "light", "dark", "satellite"]  # noqa: E501
        if map_style not in allowed_values:
            raise ValueError(
                "Invalid value for `map_style` ({0}), must be one of {1}"
                .format(map_style, allowed_values)
            )

        self._map_style = map_style

    @property
    def features(self) -> List[str]:
        """Gets the features of this MapboxIntegration.


        :return: The features of this MapboxIntegration.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features: List[str]):
        """Sets the features of this MapboxIntegration.


        :param features: The features of this MapboxIntegration.
        :type features: List[str]
        """
        allowed_values = ["markers", "routing", "geocoding", "traffic"]  # noqa: E501
        if not set(features).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `features` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(features) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._features = features
