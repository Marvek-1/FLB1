# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FunctionDefinitionParameters(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: str=None, properties: object=None, required: List[str]=None):  # noqa: E501
        """FunctionDefinitionParameters - a model defined in Swagger

        :param type: The type of this FunctionDefinitionParameters.  # noqa: E501
        :type type: str
        :param properties: The properties of this FunctionDefinitionParameters.  # noqa: E501
        :type properties: object
        :param required: The required of this FunctionDefinitionParameters.  # noqa: E501
        :type required: List[str]
        """
        self.swagger_types = {
            'type': str,
            'properties': object,
            'required': List[str]
        }

        self.attribute_map = {
            'type': 'type',
            'properties': 'properties',
            'required': 'required'
        }
        self._type = type
        self._properties = properties
        self._required = required

    @classmethod
    def from_dict(cls, dikt) -> 'FunctionDefinitionParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FunctionDefinition_parameters of this FunctionDefinitionParameters.  # noqa: E501
        :rtype: FunctionDefinitionParameters
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this FunctionDefinitionParameters.


        :return: The type of this FunctionDefinitionParameters.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this FunctionDefinitionParameters.


        :param type: The type of this FunctionDefinitionParameters.
        :type type: str
        """
        allowed_values = ["object"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def properties(self) -> object:
        """Gets the properties of this FunctionDefinitionParameters.


        :return: The properties of this FunctionDefinitionParameters.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties: object):
        """Sets the properties of this FunctionDefinitionParameters.


        :param properties: The properties of this FunctionDefinitionParameters.
        :type properties: object
        """

        self._properties = properties

    @property
    def required(self) -> List[str]:
        """Gets the required of this FunctionDefinitionParameters.


        :return: The required of this FunctionDefinitionParameters.
        :rtype: List[str]
        """
        return self._required

    @required.setter
    def required(self, required: List[str]):
        """Sets the required of this FunctionDefinitionParameters.


        :param required: The required of this FunctionDefinitionParameters.
        :type required: List[str]
        """

        self._required = required
