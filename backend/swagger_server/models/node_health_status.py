# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.node_health_status_nodes import NodeHealthStatusNodes  # noqa: F401,E501
from swagger_server import util


class NodeHealthStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active_nodes: int=None, total_registered: int=None, nodes: List[NodeHealthStatusNodes]=None):  # noqa: E501
        """NodeHealthStatus - a model defined in Swagger

        :param active_nodes: The active_nodes of this NodeHealthStatus.  # noqa: E501
        :type active_nodes: int
        :param total_registered: The total_registered of this NodeHealthStatus.  # noqa: E501
        :type total_registered: int
        :param nodes: The nodes of this NodeHealthStatus.  # noqa: E501
        :type nodes: List[NodeHealthStatusNodes]
        """
        self.swagger_types = {
            'active_nodes': int,
            'total_registered': int,
            'nodes': List[NodeHealthStatusNodes]
        }

        self.attribute_map = {
            'active_nodes': 'active_nodes',
            'total_registered': 'total_registered',
            'nodes': 'nodes'
        }
        self._active_nodes = active_nodes
        self._total_registered = total_registered
        self._nodes = nodes

    @classmethod
    def from_dict(cls, dikt) -> 'NodeHealthStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeHealthStatus of this NodeHealthStatus.  # noqa: E501
        :rtype: NodeHealthStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_nodes(self) -> int:
        """Gets the active_nodes of this NodeHealthStatus.


        :return: The active_nodes of this NodeHealthStatus.
        :rtype: int
        """
        return self._active_nodes

    @active_nodes.setter
    def active_nodes(self, active_nodes: int):
        """Sets the active_nodes of this NodeHealthStatus.


        :param active_nodes: The active_nodes of this NodeHealthStatus.
        :type active_nodes: int
        """

        self._active_nodes = active_nodes

    @property
    def total_registered(self) -> int:
        """Gets the total_registered of this NodeHealthStatus.


        :return: The total_registered of this NodeHealthStatus.
        :rtype: int
        """
        return self._total_registered

    @total_registered.setter
    def total_registered(self, total_registered: int):
        """Sets the total_registered of this NodeHealthStatus.


        :param total_registered: The total_registered of this NodeHealthStatus.
        :type total_registered: int
        """

        self._total_registered = total_registered

    @property
    def nodes(self) -> List[NodeHealthStatusNodes]:
        """Gets the nodes of this NodeHealthStatus.


        :return: The nodes of this NodeHealthStatus.
        :rtype: List[NodeHealthStatusNodes]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: List[NodeHealthStatusNodes]):
        """Sets the nodes of this NodeHealthStatus.


        :param nodes: The nodes of this NodeHealthStatus.
        :type nodes: List[NodeHealthStatusNodes]
        """

        self._nodes = nodes
