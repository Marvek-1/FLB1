# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TranscriptionResponseSegments(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, seek: float=None, start: float=None, end: float=None, text: str=None, tokens: List[int]=None, temperature: float=None):  # noqa: E501
        """TranscriptionResponseSegments - a model defined in Swagger

        :param id: The id of this TranscriptionResponseSegments.  # noqa: E501
        :type id: int
        :param seek: The seek of this TranscriptionResponseSegments.  # noqa: E501
        :type seek: float
        :param start: The start of this TranscriptionResponseSegments.  # noqa: E501
        :type start: float
        :param end: The end of this TranscriptionResponseSegments.  # noqa: E501
        :type end: float
        :param text: The text of this TranscriptionResponseSegments.  # noqa: E501
        :type text: str
        :param tokens: The tokens of this TranscriptionResponseSegments.  # noqa: E501
        :type tokens: List[int]
        :param temperature: The temperature of this TranscriptionResponseSegments.  # noqa: E501
        :type temperature: float
        """
        self.swagger_types = {
            'id': int,
            'seek': float,
            'start': float,
            'end': float,
            'text': str,
            'tokens': List[int],
            'temperature': float
        }

        self.attribute_map = {
            'id': 'id',
            'seek': 'seek',
            'start': 'start',
            'end': 'end',
            'text': 'text',
            'tokens': 'tokens',
            'temperature': 'temperature'
        }
        self._id = id
        self._seek = seek
        self._start = start
        self._end = end
        self._text = text
        self._tokens = tokens
        self._temperature = temperature

    @classmethod
    def from_dict(cls, dikt) -> 'TranscriptionResponseSegments':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TranscriptionResponse_segments of this TranscriptionResponseSegments.  # noqa: E501
        :rtype: TranscriptionResponseSegments
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this TranscriptionResponseSegments.


        :return: The id of this TranscriptionResponseSegments.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this TranscriptionResponseSegments.


        :param id: The id of this TranscriptionResponseSegments.
        :type id: int
        """

        self._id = id

    @property
    def seek(self) -> float:
        """Gets the seek of this TranscriptionResponseSegments.


        :return: The seek of this TranscriptionResponseSegments.
        :rtype: float
        """
        return self._seek

    @seek.setter
    def seek(self, seek: float):
        """Sets the seek of this TranscriptionResponseSegments.


        :param seek: The seek of this TranscriptionResponseSegments.
        :type seek: float
        """

        self._seek = seek

    @property
    def start(self) -> float:
        """Gets the start of this TranscriptionResponseSegments.


        :return: The start of this TranscriptionResponseSegments.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start: float):
        """Sets the start of this TranscriptionResponseSegments.


        :param start: The start of this TranscriptionResponseSegments.
        :type start: float
        """

        self._start = start

    @property
    def end(self) -> float:
        """Gets the end of this TranscriptionResponseSegments.


        :return: The end of this TranscriptionResponseSegments.
        :rtype: float
        """
        return self._end

    @end.setter
    def end(self, end: float):
        """Sets the end of this TranscriptionResponseSegments.


        :param end: The end of this TranscriptionResponseSegments.
        :type end: float
        """

        self._end = end

    @property
    def text(self) -> str:
        """Gets the text of this TranscriptionResponseSegments.


        :return: The text of this TranscriptionResponseSegments.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this TranscriptionResponseSegments.


        :param text: The text of this TranscriptionResponseSegments.
        :type text: str
        """

        self._text = text

    @property
    def tokens(self) -> List[int]:
        """Gets the tokens of this TranscriptionResponseSegments.


        :return: The tokens of this TranscriptionResponseSegments.
        :rtype: List[int]
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens: List[int]):
        """Sets the tokens of this TranscriptionResponseSegments.


        :param tokens: The tokens of this TranscriptionResponseSegments.
        :type tokens: List[int]
        """

        self._tokens = tokens

    @property
    def temperature(self) -> float:
        """Gets the temperature of this TranscriptionResponseSegments.


        :return: The temperature of this TranscriptionResponseSegments.
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature: float):
        """Sets the temperature of this TranscriptionResponseSegments.


        :param temperature: The temperature of this TranscriptionResponseSegments.
        :type temperature: float
        """

        self._temperature = temperature
