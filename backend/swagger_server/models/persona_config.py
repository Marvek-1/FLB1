# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PersonaConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, description: str=None, instructions: str=None, capabilities: List[str]=None, memory_scope: str=None, security_level: str=None):  # noqa: E501
        """PersonaConfig - a model defined in Swagger

        :param id: The id of this PersonaConfig.  # noqa: E501
        :type id: str
        :param name: The name of this PersonaConfig.  # noqa: E501
        :type name: str
        :param description: The description of this PersonaConfig.  # noqa: E501
        :type description: str
        :param instructions: The instructions of this PersonaConfig.  # noqa: E501
        :type instructions: str
        :param capabilities: The capabilities of this PersonaConfig.  # noqa: E501
        :type capabilities: List[str]
        :param memory_scope: The memory_scope of this PersonaConfig.  # noqa: E501
        :type memory_scope: str
        :param security_level: The security_level of this PersonaConfig.  # noqa: E501
        :type security_level: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'description': str,
            'instructions': str,
            'capabilities': List[str],
            'memory_scope': str,
            'security_level': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'description': 'description',
            'instructions': 'instructions',
            'capabilities': 'capabilities',
            'memory_scope': 'memory_scope',
            'security_level': 'security_level'
        }
        self._id = id
        self._name = name
        self._description = description
        self._instructions = instructions
        self._capabilities = capabilities
        self._memory_scope = memory_scope
        self._security_level = security_level

    @classmethod
    def from_dict(cls, dikt) -> 'PersonaConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PersonaConfig of this PersonaConfig.  # noqa: E501
        :rtype: PersonaConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this PersonaConfig.


        :return: The id of this PersonaConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PersonaConfig.


        :param id: The id of this PersonaConfig.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this PersonaConfig.


        :return: The name of this PersonaConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PersonaConfig.


        :param name: The name of this PersonaConfig.
        :type name: str
        """

        self._name = name

    @property
    def description(self) -> str:
        """Gets the description of this PersonaConfig.


        :return: The description of this PersonaConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PersonaConfig.


        :param description: The description of this PersonaConfig.
        :type description: str
        """

        self._description = description

    @property
    def instructions(self) -> str:
        """Gets the instructions of this PersonaConfig.


        :return: The instructions of this PersonaConfig.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: str):
        """Sets the instructions of this PersonaConfig.


        :param instructions: The instructions of this PersonaConfig.
        :type instructions: str
        """

        self._instructions = instructions

    @property
    def capabilities(self) -> List[str]:
        """Gets the capabilities of this PersonaConfig.


        :return: The capabilities of this PersonaConfig.
        :rtype: List[str]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities: List[str]):
        """Sets the capabilities of this PersonaConfig.


        :param capabilities: The capabilities of this PersonaConfig.
        :type capabilities: List[str]
        """

        self._capabilities = capabilities

    @property
    def memory_scope(self) -> str:
        """Gets the memory_scope of this PersonaConfig.


        :return: The memory_scope of this PersonaConfig.
        :rtype: str
        """
        return self._memory_scope

    @memory_scope.setter
    def memory_scope(self, memory_scope: str):
        """Sets the memory_scope of this PersonaConfig.


        :param memory_scope: The memory_scope of this PersonaConfig.
        :type memory_scope: str
        """
        allowed_values = ["session", "persistent", "shared"]  # noqa: E501
        if memory_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `memory_scope` ({0}), must be one of {1}"
                .format(memory_scope, allowed_values)
            )

        self._memory_scope = memory_scope

    @property
    def security_level(self) -> str:
        """Gets the security_level of this PersonaConfig.


        :return: The security_level of this PersonaConfig.
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level: str):
        """Sets the security_level of this PersonaConfig.


        :param security_level: The security_level of this PersonaConfig.
        :type security_level: str
        """
        allowed_values = ["public", "private", "restricted"]  # noqa: E501
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"
                .format(security_level, allowed_values)
            )

        self._security_level = security_level
