# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BioCoursealignmentBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, course_modules: List[str]=None, standard_framework: str=None):  # noqa: E501
        """BioCoursealignmentBody - a model defined in Swagger

        :param course_modules: The course_modules of this BioCoursealignmentBody.  # noqa: E501
        :type course_modules: List[str]
        :param standard_framework: The standard_framework of this BioCoursealignmentBody.  # noqa: E501
        :type standard_framework: str
        """
        self.swagger_types = {
            'course_modules': List[str],
            'standard_framework': str
        }

        self.attribute_map = {
            'course_modules': 'course_modules',
            'standard_framework': 'standard_framework'
        }
        self._course_modules = course_modules
        self._standard_framework = standard_framework

    @classmethod
    def from_dict(cls, dikt) -> 'BioCoursealignmentBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The bio_coursealignment_body of this BioCoursealignmentBody.  # noqa: E501
        :rtype: BioCoursealignmentBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course_modules(self) -> List[str]:
        """Gets the course_modules of this BioCoursealignmentBody.


        :return: The course_modules of this BioCoursealignmentBody.
        :rtype: List[str]
        """
        return self._course_modules

    @course_modules.setter
    def course_modules(self, course_modules: List[str]):
        """Sets the course_modules of this BioCoursealignmentBody.


        :param course_modules: The course_modules of this BioCoursealignmentBody.
        :type course_modules: List[str]
        """

        self._course_modules = course_modules

    @property
    def standard_framework(self) -> str:
        """Gets the standard_framework of this BioCoursealignmentBody.


        :return: The standard_framework of this BioCoursealignmentBody.
        :rtype: str
        """
        return self._standard_framework

    @standard_framework.setter
    def standard_framework(self, standard_framework: str):
        """Sets the standard_framework of this BioCoursealignmentBody.


        :param standard_framework: The standard_framework of this BioCoursealignmentBody.
        :type standard_framework: str
        """
        allowed_values = ["iscb", "abf", "custom"]  # noqa: E501
        if standard_framework not in allowed_values:
            raise ValueError(
                "Invalid value for `standard_framework` ({0}), must be one of {1}"
                .format(standard_framework, allowed_values)
            )

        self._standard_framework = standard_framework
