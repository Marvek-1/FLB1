# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ImagesGenerationsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, prompts: str=None, n: int=1, size: str='1024x1024', quality: str='standard'):  # noqa: E501
        """ImagesGenerationsBody - a model defined in Swagger

        :param prompts: The prompts of this ImagesGenerationsBody.  # noqa: E501
        :type prompts: str
        :param n: The n of this ImagesGenerationsBody.  # noqa: E501
        :type n: int
        :param size: The size of this ImagesGenerationsBody.  # noqa: E501
        :type size: str
        :param quality: The quality of this ImagesGenerationsBody.  # noqa: E501
        :type quality: str
        """
        self.swagger_types = {
            'prompts': str,
            'n': int,
            'size': str,
            'quality': str
        }

        self.attribute_map = {
            'prompts': 'prompts',
            'n': 'n',
            'size': 'size',
            'quality': 'quality'
        }
        self._prompts = prompts
        self._n = n
        self._size = size
        self._quality = quality

    @classmethod
    def from_dict(cls, dikt) -> 'ImagesGenerationsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The images_generations_body of this ImagesGenerationsBody.  # noqa: E501
        :rtype: ImagesGenerationsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prompts(self) -> str:
        """Gets the prompts of this ImagesGenerationsBody.


        :return: The prompts of this ImagesGenerationsBody.
        :rtype: str
        """
        return self._prompts

    @prompts.setter
    def prompts(self, prompts: str):
        """Sets the prompts of this ImagesGenerationsBody.


        :param prompts: The prompts of this ImagesGenerationsBody.
        :type prompts: str
        """
        if prompts is None:
            raise ValueError("Invalid value for `prompts`, must not be `None`")  # noqa: E501

        self._prompts = prompts

    @property
    def n(self) -> int:
        """Gets the n of this ImagesGenerationsBody.


        :return: The n of this ImagesGenerationsBody.
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n: int):
        """Sets the n of this ImagesGenerationsBody.


        :param n: The n of this ImagesGenerationsBody.
        :type n: int
        """

        self._n = n

    @property
    def size(self) -> str:
        """Gets the size of this ImagesGenerationsBody.


        :return: The size of this ImagesGenerationsBody.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this ImagesGenerationsBody.


        :param size: The size of this ImagesGenerationsBody.
        :type size: str
        """
        allowed_values = ["256x256", "512x512", "1024x1024", "1792x1024", "1024x1792"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def quality(self) -> str:
        """Gets the quality of this ImagesGenerationsBody.


        :return: The quality of this ImagesGenerationsBody.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality: str):
        """Sets the quality of this ImagesGenerationsBody.


        :param quality: The quality of this ImagesGenerationsBody.
        :type quality: str
        """
        allowed_values = ["standard", "hd"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality
