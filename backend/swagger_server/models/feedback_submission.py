# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.feedback_submission_user_info import FeedbackSubmissionUserInfo  # noqa: F401,E501
from swagger_server import util


class FeedbackSubmission(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, category: str=None, title: str=None, description: str=None, priority: str=None, user_info: FeedbackSubmissionUserInfo=None, attachments: List[str]=None):  # noqa: E501
        """FeedbackSubmission - a model defined in Swagger

        :param category: The category of this FeedbackSubmission.  # noqa: E501
        :type category: str
        :param title: The title of this FeedbackSubmission.  # noqa: E501
        :type title: str
        :param description: The description of this FeedbackSubmission.  # noqa: E501
        :type description: str
        :param priority: The priority of this FeedbackSubmission.  # noqa: E501
        :type priority: str
        :param user_info: The user_info of this FeedbackSubmission.  # noqa: E501
        :type user_info: FeedbackSubmissionUserInfo
        :param attachments: The attachments of this FeedbackSubmission.  # noqa: E501
        :type attachments: List[str]
        """
        self.swagger_types = {
            'category': str,
            'title': str,
            'description': str,
            'priority': str,
            'user_info': FeedbackSubmissionUserInfo,
            'attachments': List[str]
        }

        self.attribute_map = {
            'category': 'category',
            'title': 'title',
            'description': 'description',
            'priority': 'priority',
            'user_info': 'user_info',
            'attachments': 'attachments'
        }
        self._category = category
        self._title = title
        self._description = description
        self._priority = priority
        self._user_info = user_info
        self._attachments = attachments

    @classmethod
    def from_dict(cls, dikt) -> 'FeedbackSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedbackSubmission of this FeedbackSubmission.  # noqa: E501
        :rtype: FeedbackSubmission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> str:
        """Gets the category of this FeedbackSubmission.


        :return: The category of this FeedbackSubmission.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this FeedbackSubmission.


        :param category: The category of this FeedbackSubmission.
        :type category: str
        """
        allowed_values = ["bug_report", "feature_request", "improvement", "general"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def title(self) -> str:
        """Gets the title of this FeedbackSubmission.


        :return: The title of this FeedbackSubmission.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this FeedbackSubmission.


        :param title: The title of this FeedbackSubmission.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this FeedbackSubmission.


        :return: The description of this FeedbackSubmission.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this FeedbackSubmission.


        :param description: The description of this FeedbackSubmission.
        :type description: str
        """

        self._description = description

    @property
    def priority(self) -> str:
        """Gets the priority of this FeedbackSubmission.


        :return: The priority of this FeedbackSubmission.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority: str):
        """Sets the priority of this FeedbackSubmission.


        :param priority: The priority of this FeedbackSubmission.
        :type priority: str
        """
        allowed_values = ["low", "medium", "high", "critical"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def user_info(self) -> FeedbackSubmissionUserInfo:
        """Gets the user_info of this FeedbackSubmission.


        :return: The user_info of this FeedbackSubmission.
        :rtype: FeedbackSubmissionUserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info: FeedbackSubmissionUserInfo):
        """Sets the user_info of this FeedbackSubmission.


        :param user_info: The user_info of this FeedbackSubmission.
        :type user_info: FeedbackSubmissionUserInfo
        """

        self._user_info = user_info

    @property
    def attachments(self) -> List[str]:
        """Gets the attachments of this FeedbackSubmission.


        :return: The attachments of this FeedbackSubmission.
        :rtype: List[str]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments: List[str]):
        """Sets the attachments of this FeedbackSubmission.


        :param attachments: The attachments of this FeedbackSubmission.
        :type attachments: List[str]
        """

        self._attachments = attachments
