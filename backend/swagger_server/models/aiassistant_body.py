# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AiassistantBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, prompt: str=None, context: str=None, persona_id: str=None):  # noqa: E501
        """AiassistantBody - a model defined in Swagger

        :param prompt: The prompt of this AiassistantBody.  # noqa: E501
        :type prompt: str
        :param context: The context of this AiassistantBody.  # noqa: E501
        :type context: str
        :param persona_id: The persona_id of this AiassistantBody.  # noqa: E501
        :type persona_id: str
        """
        self.swagger_types = {
            'prompt': str,
            'context': str,
            'persona_id': str
        }

        self.attribute_map = {
            'prompt': 'prompt',
            'context': 'context',
            'persona_id': 'persona_id'
        }
        self._prompt = prompt
        self._context = context
        self._persona_id = persona_id

    @classmethod
    def from_dict(cls, dikt) -> 'AiassistantBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The aiassistant_body of this AiassistantBody.  # noqa: E501
        :rtype: AiassistantBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def prompt(self) -> str:
        """Gets the prompt of this AiassistantBody.


        :return: The prompt of this AiassistantBody.
        :rtype: str
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt: str):
        """Sets the prompt of this AiassistantBody.


        :param prompt: The prompt of this AiassistantBody.
        :type prompt: str
        """
        if prompt is None:
            raise ValueError("Invalid value for `prompt`, must not be `None`")  # noqa: E501

        self._prompt = prompt

    @property
    def context(self) -> str:
        """Gets the context of this AiassistantBody.

        Additional context for the conversation  # noqa: E501

        :return: The context of this AiassistantBody.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context: str):
        """Sets the context of this AiassistantBody.

        Additional context for the conversation  # noqa: E501

        :param context: The context of this AiassistantBody.
        :type context: str
        """

        self._context = context

    @property
    def persona_id(self) -> str:
        """Gets the persona_id of this AiassistantBody.

        Specific persona to use for this interaction  # noqa: E501

        :return: The persona_id of this AiassistantBody.
        :rtype: str
        """
        return self._persona_id

    @persona_id.setter
    def persona_id(self, persona_id: str):
        """Sets the persona_id of this AiassistantBody.

        Specific persona to use for this interaction  # noqa: E501

        :param persona_id: The persona_id of this AiassistantBody.
        :type persona_id: str
        """

        self._persona_id = persona_id
