# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AlertsSubscribeBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, alert_types: List[str]=None, regions: List[str]=None, webhook_url: str=None):  # noqa: E501
        """AlertsSubscribeBody - a model defined in Swagger

        :param alert_types: The alert_types of this AlertsSubscribeBody.  # noqa: E501
        :type alert_types: List[str]
        :param regions: The regions of this AlertsSubscribeBody.  # noqa: E501
        :type regions: List[str]
        :param webhook_url: The webhook_url of this AlertsSubscribeBody.  # noqa: E501
        :type webhook_url: str
        """
        self.swagger_types = {
            'alert_types': List[str],
            'regions': List[str],
            'webhook_url': str
        }

        self.attribute_map = {
            'alert_types': 'alert_types',
            'regions': 'regions',
            'webhook_url': 'webhook_url'
        }
        self._alert_types = alert_types
        self._regions = regions
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt) -> 'AlertsSubscribeBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The alerts_subscribe_body of this AlertsSubscribeBody.  # noqa: E501
        :rtype: AlertsSubscribeBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_types(self) -> List[str]:
        """Gets the alert_types of this AlertsSubscribeBody.


        :return: The alert_types of this AlertsSubscribeBody.
        :rtype: List[str]
        """
        return self._alert_types

    @alert_types.setter
    def alert_types(self, alert_types: List[str]):
        """Sets the alert_types of this AlertsSubscribeBody.


        :param alert_types: The alert_types of this AlertsSubscribeBody.
        :type alert_types: List[str]
        """
        allowed_values = ["earthquake", "flood", "wildfire", "storm", "epidemic"]  # noqa: E501
        if not set(alert_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `alert_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(alert_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._alert_types = alert_types

    @property
    def regions(self) -> List[str]:
        """Gets the regions of this AlertsSubscribeBody.


        :return: The regions of this AlertsSubscribeBody.
        :rtype: List[str]
        """
        return self._regions

    @regions.setter
    def regions(self, regions: List[str]):
        """Sets the regions of this AlertsSubscribeBody.


        :param regions: The regions of this AlertsSubscribeBody.
        :type regions: List[str]
        """

        self._regions = regions

    @property
    def webhook_url(self) -> str:
        """Gets the webhook_url of this AlertsSubscribeBody.


        :return: The webhook_url of this AlertsSubscribeBody.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url: str):
        """Sets the webhook_url of this AlertsSubscribeBody.


        :param webhook_url: The webhook_url of this AlertsSubscribeBody.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url
