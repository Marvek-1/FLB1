# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DatatransformationBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data: List[object]=None, transformations: List[str]=None):  # noqa: E501
        """DatatransformationBody - a model defined in Swagger

        :param data: The data of this DatatransformationBody.  # noqa: E501
        :type data: List[object]
        :param transformations: The transformations of this DatatransformationBody.  # noqa: E501
        :type transformations: List[str]
        """
        self.swagger_types = {
            'data': List[object],
            'transformations': List[str]
        }

        self.attribute_map = {
            'data': 'data',
            'transformations': 'transformations'
        }
        self._data = data
        self._transformations = transformations

    @classmethod
    def from_dict(cls, dikt) -> 'DatatransformationBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The datatransformation_body of this DatatransformationBody.  # noqa: E501
        :rtype: DatatransformationBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[object]:
        """Gets the data of this DatatransformationBody.


        :return: The data of this DatatransformationBody.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data: List[object]):
        """Sets the data of this DatatransformationBody.


        :param data: The data of this DatatransformationBody.
        :type data: List[object]
        """

        self._data = data

    @property
    def transformations(self) -> List[str]:
        """Gets the transformations of this DatatransformationBody.


        :return: The transformations of this DatatransformationBody.
        :rtype: List[str]
        """
        return self._transformations

    @transformations.setter
    def transformations(self, transformations: List[str]):
        """Sets the transformations of this DatatransformationBody.


        :param transformations: The transformations of this DatatransformationBody.
        :type transformations: List[str]
        """
        allowed_values = ["pivot", "melt", "aggregate", "join", "filter"]  # noqa: E501
        if not set(transformations).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `transformations` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(transformations) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._transformations = transformations
