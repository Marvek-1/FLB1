# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HypothesisRequest(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, hypothesis: str=None, domain: str=None, evidence: List[str]=None, confidence_threshold: float=None):  # noqa: E501
        """HypothesisRequest - a model defined in Swagger

        :param hypothesis: The hypothesis of this HypothesisRequest.  # noqa: E501
        :type hypothesis: str
        :param domain: The domain of this HypothesisRequest.  # noqa: E501
        :type domain: str
        :param evidence: The evidence of this HypothesisRequest.  # noqa: E501
        :type evidence: List[str]
        :param confidence_threshold: The confidence_threshold of this HypothesisRequest.  # noqa: E501
        :type confidence_threshold: float
        """
        self.swagger_types = {
            'hypothesis': str,
            'domain': str,
            'evidence': List[str],
            'confidence_threshold': float
        }

        self.attribute_map = {
            'hypothesis': 'hypothesis',
            'domain': 'domain',
            'evidence': 'evidence',
            'confidence_threshold': 'confidence_threshold'
        }
        self._hypothesis = hypothesis
        self._domain = domain
        self._evidence = evidence
        self._confidence_threshold = confidence_threshold

    @classmethod
    def from_dict(cls, dikt) -> 'HypothesisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HypothesisRequest of this HypothesisRequest.  # noqa: E501
        :rtype: HypothesisRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hypothesis(self) -> str:
        """Gets the hypothesis of this HypothesisRequest.


        :return: The hypothesis of this HypothesisRequest.
        :rtype: str
        """
        return self._hypothesis

    @hypothesis.setter
    def hypothesis(self, hypothesis: str):
        """Sets the hypothesis of this HypothesisRequest.


        :param hypothesis: The hypothesis of this HypothesisRequest.
        :type hypothesis: str
        """

        self._hypothesis = hypothesis

    @property
    def domain(self) -> str:
        """Gets the domain of this HypothesisRequest.


        :return: The domain of this HypothesisRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this HypothesisRequest.


        :param domain: The domain of this HypothesisRequest.
        :type domain: str
        """

        self._domain = domain

    @property
    def evidence(self) -> List[str]:
        """Gets the evidence of this HypothesisRequest.


        :return: The evidence of this HypothesisRequest.
        :rtype: List[str]
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence: List[str]):
        """Sets the evidence of this HypothesisRequest.


        :param evidence: The evidence of this HypothesisRequest.
        :type evidence: List[str]
        """

        self._evidence = evidence

    @property
    def confidence_threshold(self) -> float:
        """Gets the confidence_threshold of this HypothesisRequest.


        :return: The confidence_threshold of this HypothesisRequest.
        :rtype: float
        """
        return self._confidence_threshold

    @confidence_threshold.setter
    def confidence_threshold(self, confidence_threshold: float):
        """Sets the confidence_threshold of this HypothesisRequest.


        :param confidence_threshold: The confidence_threshold of this HypothesisRequest.
        :type confidence_threshold: float
        """

        self._confidence_threshold = confidence_threshold
