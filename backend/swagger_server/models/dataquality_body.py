# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DataqualityBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data: List[object]=None, quality_checks: List[str]=None):  # noqa: E501
        """DataqualityBody - a model defined in Swagger

        :param data: The data of this DataqualityBody.  # noqa: E501
        :type data: List[object]
        :param quality_checks: The quality_checks of this DataqualityBody.  # noqa: E501
        :type quality_checks: List[str]
        """
        self.swagger_types = {
            'data': List[object],
            'quality_checks': List[str]
        }

        self.attribute_map = {
            'data': 'data',
            'quality_checks': 'quality_checks'
        }
        self._data = data
        self._quality_checks = quality_checks

    @classmethod
    def from_dict(cls, dikt) -> 'DataqualityBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The dataquality_body of this DataqualityBody.  # noqa: E501
        :rtype: DataqualityBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[object]:
        """Gets the data of this DataqualityBody.


        :return: The data of this DataqualityBody.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data: List[object]):
        """Sets the data of this DataqualityBody.


        :param data: The data of this DataqualityBody.
        :type data: List[object]
        """

        self._data = data

    @property
    def quality_checks(self) -> List[str]:
        """Gets the quality_checks of this DataqualityBody.


        :return: The quality_checks of this DataqualityBody.
        :rtype: List[str]
        """
        return self._quality_checks

    @quality_checks.setter
    def quality_checks(self, quality_checks: List[str]):
        """Sets the quality_checks of this DataqualityBody.


        :param quality_checks: The quality_checks of this DataqualityBody.
        :type quality_checks: List[str]
        """
        allowed_values = ["completeness", "accuracy", "consistency", "validity"]  # noqa: E501
        if not set(quality_checks).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `quality_checks` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(quality_checks) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._quality_checks = quality_checks
