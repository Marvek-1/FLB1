# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ChatMessageFunctionCall(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, arguments: str=None):  # noqa: E501
        """ChatMessageFunctionCall - a model defined in Swagger

        :param name: The name of this ChatMessageFunctionCall.  # noqa: E501
        :type name: str
        :param arguments: The arguments of this ChatMessageFunctionCall.  # noqa: E501
        :type arguments: str
        """
        self.swagger_types = {
            'name': str,
            'arguments': str
        }

        self.attribute_map = {
            'name': 'name',
            'arguments': 'arguments'
        }
        self._name = name
        self._arguments = arguments

    @classmethod
    def from_dict(cls, dikt) -> 'ChatMessageFunctionCall':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatMessage_function_call of this ChatMessageFunctionCall.  # noqa: E501
        :rtype: ChatMessageFunctionCall
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ChatMessageFunctionCall.


        :return: The name of this ChatMessageFunctionCall.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ChatMessageFunctionCall.


        :param name: The name of this ChatMessageFunctionCall.
        :type name: str
        """

        self._name = name

    @property
    def arguments(self) -> str:
        """Gets the arguments of this ChatMessageFunctionCall.


        :return: The arguments of this ChatMessageFunctionCall.
        :rtype: str
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments: str):
        """Sets the arguments of this ChatMessageFunctionCall.


        :param arguments: The arguments of this ChatMessageFunctionCall.
        :type arguments: str
        """

        self._arguments = arguments
