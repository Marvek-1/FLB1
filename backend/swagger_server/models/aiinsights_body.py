# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class AiinsightsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data: List[object]=None, analysis_type: str=None):  # noqa: E501
        """AiinsightsBody - a model defined in Swagger

        :param data: The data of this AiinsightsBody.  # noqa: E501
        :type data: List[object]
        :param analysis_type: The analysis_type of this AiinsightsBody.  # noqa: E501
        :type analysis_type: str
        """
        self.swagger_types = {
            'data': List[object],
            'analysis_type': str
        }

        self.attribute_map = {
            'data': 'data',
            'analysis_type': 'analysis_type'
        }
        self._data = data
        self._analysis_type = analysis_type

    @classmethod
    def from_dict(cls, dikt) -> 'AiinsightsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The aiinsights_body of this AiinsightsBody.  # noqa: E501
        :rtype: AiinsightsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[object]:
        """Gets the data of this AiinsightsBody.


        :return: The data of this AiinsightsBody.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data: List[object]):
        """Sets the data of this AiinsightsBody.


        :param data: The data of this AiinsightsBody.
        :type data: List[object]
        """

        self._data = data

    @property
    def analysis_type(self) -> str:
        """Gets the analysis_type of this AiinsightsBody.


        :return: The analysis_type of this AiinsightsBody.
        :rtype: str
        """
        return self._analysis_type

    @analysis_type.setter
    def analysis_type(self, analysis_type: str):
        """Sets the analysis_type of this AiinsightsBody.


        :param analysis_type: The analysis_type of this AiinsightsBody.
        :type analysis_type: str
        """
        allowed_values = ["correlation", "trend", "anomaly", "prediction"]  # noqa: E501
        if analysis_type not in allowed_values:
            raise ValueError(
                "Invalid value for `analysis_type` ({0}), must be one of {1}"
                .format(analysis_type, allowed_values)
            )

        self._analysis_type = analysis_type
