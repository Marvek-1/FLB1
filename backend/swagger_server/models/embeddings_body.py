# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.one_ofembeddings_body_input import OneOfembeddingsBodyInput  # noqa: F401,E501
from swagger_server import util


class EmbeddingsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model: str=None, input: OneOfembeddingsBodyInput=None, encoding_format: str='float'):  # noqa: E501
        """EmbeddingsBody - a model defined in Swagger

        :param model: The model of this EmbeddingsBody.  # noqa: E501
        :type model: str
        :param input: The input of this EmbeddingsBody.  # noqa: E501
        :type input: OneOfembeddingsBodyInput
        :param encoding_format: The encoding_format of this EmbeddingsBody.  # noqa: E501
        :type encoding_format: str
        """
        self.swagger_types = {
            'model': str,
            'input': OneOfembeddingsBodyInput,
            'encoding_format': str
        }

        self.attribute_map = {
            'model': 'model',
            'input': 'input',
            'encoding_format': 'encoding_format'
        }
        self._model = model
        self._input = input
        self._encoding_format = encoding_format

    @classmethod
    def from_dict(cls, dikt) -> 'EmbeddingsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The embeddings_body of this EmbeddingsBody.  # noqa: E501
        :rtype: EmbeddingsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self) -> str:
        """Gets the model of this EmbeddingsBody.


        :return: The model of this EmbeddingsBody.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this EmbeddingsBody.


        :param model: The model of this EmbeddingsBody.
        :type model: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def input(self) -> OneOfembeddingsBodyInput:
        """Gets the input of this EmbeddingsBody.


        :return: The input of this EmbeddingsBody.
        :rtype: OneOfembeddingsBodyInput
        """
        return self._input

    @input.setter
    def input(self, input: OneOfembeddingsBodyInput):
        """Sets the input of this EmbeddingsBody.


        :param input: The input of this EmbeddingsBody.
        :type input: OneOfembeddingsBodyInput
        """
        if input is None:
            raise ValueError("Invalid value for `input`, must not be `None`")  # noqa: E501

        self._input = input

    @property
    def encoding_format(self) -> str:
        """Gets the encoding_format of this EmbeddingsBody.


        :return: The encoding_format of this EmbeddingsBody.
        :rtype: str
        """
        return self._encoding_format

    @encoding_format.setter
    def encoding_format(self, encoding_format: str):
        """Sets the encoding_format of this EmbeddingsBody.


        :param encoding_format: The encoding_format of this EmbeddingsBody.
        :type encoding_format: str
        """
        allowed_values = ["float", "base64"]  # noqa: E501
        if encoding_format not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding_format` ({0}), must be one of {1}"
                .format(encoding_format, allowed_values)
            )

        self._encoding_format = encoding_format
