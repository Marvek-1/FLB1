# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.embedding_response_data import EmbeddingResponseData  # noqa: F401,E501
from swagger_server.models.embedding_response_usage import EmbeddingResponseUsage  # noqa: F401,E501
from swagger_server import util


class EmbeddingResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, object: str=None, data: List[EmbeddingResponseData]=None, model: str=None, usage: EmbeddingResponseUsage=None):  # noqa: E501
        """EmbeddingResponse - a model defined in Swagger

        :param object: The object of this EmbeddingResponse.  # noqa: E501
        :type object: str
        :param data: The data of this EmbeddingResponse.  # noqa: E501
        :type data: List[EmbeddingResponseData]
        :param model: The model of this EmbeddingResponse.  # noqa: E501
        :type model: str
        :param usage: The usage of this EmbeddingResponse.  # noqa: E501
        :type usage: EmbeddingResponseUsage
        """
        self.swagger_types = {
            'object': str,
            'data': List[EmbeddingResponseData],
            'model': str,
            'usage': EmbeddingResponseUsage
        }

        self.attribute_map = {
            'object': 'object',
            'data': 'data',
            'model': 'model',
            'usage': 'usage'
        }
        self._object = object
        self._data = data
        self._model = model
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt) -> 'EmbeddingResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EmbeddingResponse of this EmbeddingResponse.  # noqa: E501
        :rtype: EmbeddingResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object(self) -> str:
        """Gets the object of this EmbeddingResponse.


        :return: The object of this EmbeddingResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: str):
        """Sets the object of this EmbeddingResponse.


        :param object: The object of this EmbeddingResponse.
        :type object: str
        """
        allowed_values = ["list"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def data(self) -> List[EmbeddingResponseData]:
        """Gets the data of this EmbeddingResponse.


        :return: The data of this EmbeddingResponse.
        :rtype: List[EmbeddingResponseData]
        """
        return self._data

    @data.setter
    def data(self, data: List[EmbeddingResponseData]):
        """Sets the data of this EmbeddingResponse.


        :param data: The data of this EmbeddingResponse.
        :type data: List[EmbeddingResponseData]
        """

        self._data = data

    @property
    def model(self) -> str:
        """Gets the model of this EmbeddingResponse.


        :return: The model of this EmbeddingResponse.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this EmbeddingResponse.


        :param model: The model of this EmbeddingResponse.
        :type model: str
        """

        self._model = model

    @property
    def usage(self) -> EmbeddingResponseUsage:
        """Gets the usage of this EmbeddingResponse.


        :return: The usage of this EmbeddingResponse.
        :rtype: EmbeddingResponseUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage: EmbeddingResponseUsage):
        """Sets the usage of this EmbeddingResponse.


        :param usage: The usage of this EmbeddingResponse.
        :type usage: EmbeddingResponseUsage
        """

        self._usage = usage
