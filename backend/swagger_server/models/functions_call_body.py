# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.chat_message import ChatMessage  # noqa: F401,E501
from swagger_server.models.function_definition import FunctionDefinition  # noqa: F401,E501
from swagger_server import util


class FunctionsCallBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model: str=None, messages: List[ChatMessage]=None, functions: List[FunctionDefinition]=None, tool_choice: str='auto'):  # noqa: E501
        """FunctionsCallBody - a model defined in Swagger

        :param model: The model of this FunctionsCallBody.  # noqa: E501
        :type model: str
        :param messages: The messages of this FunctionsCallBody.  # noqa: E501
        :type messages: List[ChatMessage]
        :param functions: The functions of this FunctionsCallBody.  # noqa: E501
        :type functions: List[FunctionDefinition]
        :param tool_choice: The tool_choice of this FunctionsCallBody.  # noqa: E501
        :type tool_choice: str
        """
        self.swagger_types = {
            'model': str,
            'messages': List[ChatMessage],
            'functions': List[FunctionDefinition],
            'tool_choice': str
        }

        self.attribute_map = {
            'model': 'model',
            'messages': 'messages',
            'functions': 'functions',
            'tool_choice': 'tool_choice'
        }
        self._model = model
        self._messages = messages
        self._functions = functions
        self._tool_choice = tool_choice

    @classmethod
    def from_dict(cls, dikt) -> 'FunctionsCallBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The functions_call_body of this FunctionsCallBody.  # noqa: E501
        :rtype: FunctionsCallBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self) -> str:
        """Gets the model of this FunctionsCallBody.


        :return: The model of this FunctionsCallBody.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this FunctionsCallBody.


        :param model: The model of this FunctionsCallBody.
        :type model: str
        """
        allowed_values = ["gpt-4o", "gpt-4o-mini", "gpt-4-turbo"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def messages(self) -> List[ChatMessage]:
        """Gets the messages of this FunctionsCallBody.


        :return: The messages of this FunctionsCallBody.
        :rtype: List[ChatMessage]
        """
        return self._messages

    @messages.setter
    def messages(self, messages: List[ChatMessage]):
        """Sets the messages of this FunctionsCallBody.


        :param messages: The messages of this FunctionsCallBody.
        :type messages: List[ChatMessage]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")  # noqa: E501

        self._messages = messages

    @property
    def functions(self) -> List[FunctionDefinition]:
        """Gets the functions of this FunctionsCallBody.


        :return: The functions of this FunctionsCallBody.
        :rtype: List[FunctionDefinition]
        """
        return self._functions

    @functions.setter
    def functions(self, functions: List[FunctionDefinition]):
        """Sets the functions of this FunctionsCallBody.


        :param functions: The functions of this FunctionsCallBody.
        :type functions: List[FunctionDefinition]
        """

        self._functions = functions

    @property
    def tool_choice(self) -> str:
        """Gets the tool_choice of this FunctionsCallBody.


        :return: The tool_choice of this FunctionsCallBody.
        :rtype: str
        """
        return self._tool_choice

    @tool_choice.setter
    def tool_choice(self, tool_choice: str):
        """Sets the tool_choice of this FunctionsCallBody.


        :param tool_choice: The tool_choice of this FunctionsCallBody.
        :type tool_choice: str
        """
        allowed_values = ["auto", "required", "none"]  # noqa: E501
        if tool_choice not in allowed_values:
            raise ValueError(
                "Invalid value for `tool_choice` ({0}), must be one of {1}"
                .format(tool_choice, allowed_values)
            )

        self._tool_choice = tool_choice
