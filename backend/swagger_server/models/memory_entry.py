# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MemoryEntry(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, user_id: str=None, content: str=None, type: str=None, importance: float=None, timestamp: datetime=None, tags: List[str]=None):  # noqa: E501
        """MemoryEntry - a model defined in Swagger

        :param id: The id of this MemoryEntry.  # noqa: E501
        :type id: str
        :param user_id: The user_id of this MemoryEntry.  # noqa: E501
        :type user_id: str
        :param content: The content of this MemoryEntry.  # noqa: E501
        :type content: str
        :param type: The type of this MemoryEntry.  # noqa: E501
        :type type: str
        :param importance: The importance of this MemoryEntry.  # noqa: E501
        :type importance: float
        :param timestamp: The timestamp of this MemoryEntry.  # noqa: E501
        :type timestamp: datetime
        :param tags: The tags of this MemoryEntry.  # noqa: E501
        :type tags: List[str]
        """
        self.swagger_types = {
            'id': str,
            'user_id': str,
            'content': str,
            'type': str,
            'importance': float,
            'timestamp': datetime,
            'tags': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'user_id',
            'content': 'content',
            'type': 'type',
            'importance': 'importance',
            'timestamp': 'timestamp',
            'tags': 'tags'
        }
        self._id = id
        self._user_id = user_id
        self._content = content
        self._type = type
        self._importance = importance
        self._timestamp = timestamp
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'MemoryEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MemoryEntry of this MemoryEntry.  # noqa: E501
        :rtype: MemoryEntry
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this MemoryEntry.


        :return: The id of this MemoryEntry.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MemoryEntry.


        :param id: The id of this MemoryEntry.
        :type id: str
        """

        self._id = id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this MemoryEntry.


        :return: The user_id of this MemoryEntry.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this MemoryEntry.


        :param user_id: The user_id of this MemoryEntry.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def content(self) -> str:
        """Gets the content of this MemoryEntry.


        :return: The content of this MemoryEntry.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this MemoryEntry.


        :param content: The content of this MemoryEntry.
        :type content: str
        """

        self._content = content

    @property
    def type(self) -> str:
        """Gets the type of this MemoryEntry.


        :return: The type of this MemoryEntry.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MemoryEntry.


        :param type: The type of this MemoryEntry.
        :type type: str
        """
        allowed_values = ["conversation", "preference", "fact", "context"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def importance(self) -> float:
        """Gets the importance of this MemoryEntry.


        :return: The importance of this MemoryEntry.
        :rtype: float
        """
        return self._importance

    @importance.setter
    def importance(self, importance: float):
        """Sets the importance of this MemoryEntry.


        :param importance: The importance of this MemoryEntry.
        :type importance: float
        """

        self._importance = importance

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this MemoryEntry.


        :return: The timestamp of this MemoryEntry.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this MemoryEntry.


        :param timestamp: The timestamp of this MemoryEntry.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this MemoryEntry.


        :return: The tags of this MemoryEntry.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this MemoryEntry.


        :param tags: The tags of this MemoryEntry.
        :type tags: List[str]
        """

        self._tags = tags
