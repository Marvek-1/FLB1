# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DatacleaningBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data: List[object]=None, imputation_strategies: List[str]=None, outlier_handling: str=None, normalization_scaling: str=None):  # noqa: E501
        """DatacleaningBody - a model defined in Swagger

        :param data: The data of this DatacleaningBody.  # noqa: E501
        :type data: List[object]
        :param imputation_strategies: The imputation_strategies of this DatacleaningBody.  # noqa: E501
        :type imputation_strategies: List[str]
        :param outlier_handling: The outlier_handling of this DatacleaningBody.  # noqa: E501
        :type outlier_handling: str
        :param normalization_scaling: The normalization_scaling of this DatacleaningBody.  # noqa: E501
        :type normalization_scaling: str
        """
        self.swagger_types = {
            'data': List[object],
            'imputation_strategies': List[str],
            'outlier_handling': str,
            'normalization_scaling': str
        }

        self.attribute_map = {
            'data': 'data',
            'imputation_strategies': 'imputation_strategies',
            'outlier_handling': 'outlier_handling',
            'normalization_scaling': 'normalization_scaling'
        }
        self._data = data
        self._imputation_strategies = imputation_strategies
        self._outlier_handling = outlier_handling
        self._normalization_scaling = normalization_scaling

    @classmethod
    def from_dict(cls, dikt) -> 'DatacleaningBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The datacleaning_body of this DatacleaningBody.  # noqa: E501
        :rtype: DatacleaningBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self) -> List[object]:
        """Gets the data of this DatacleaningBody.


        :return: The data of this DatacleaningBody.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data: List[object]):
        """Sets the data of this DatacleaningBody.


        :param data: The data of this DatacleaningBody.
        :type data: List[object]
        """

        self._data = data

    @property
    def imputation_strategies(self) -> List[str]:
        """Gets the imputation_strategies of this DatacleaningBody.


        :return: The imputation_strategies of this DatacleaningBody.
        :rtype: List[str]
        """
        return self._imputation_strategies

    @imputation_strategies.setter
    def imputation_strategies(self, imputation_strategies: List[str]):
        """Sets the imputation_strategies of this DatacleaningBody.


        :param imputation_strategies: The imputation_strategies of this DatacleaningBody.
        :type imputation_strategies: List[str]
        """
        allowed_values = ["mean", "median", "mode", "forward_fill", "backward_fill"]  # noqa: E501
        if not set(imputation_strategies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `imputation_strategies` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(imputation_strategies) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._imputation_strategies = imputation_strategies

    @property
    def outlier_handling(self) -> str:
        """Gets the outlier_handling of this DatacleaningBody.


        :return: The outlier_handling of this DatacleaningBody.
        :rtype: str
        """
        return self._outlier_handling

    @outlier_handling.setter
    def outlier_handling(self, outlier_handling: str):
        """Sets the outlier_handling of this DatacleaningBody.


        :param outlier_handling: The outlier_handling of this DatacleaningBody.
        :type outlier_handling: str
        """
        allowed_values = ["z_score", "iqr", "isolation_forest"]  # noqa: E501
        if outlier_handling not in allowed_values:
            raise ValueError(
                "Invalid value for `outlier_handling` ({0}), must be one of {1}"
                .format(outlier_handling, allowed_values)
            )

        self._outlier_handling = outlier_handling

    @property
    def normalization_scaling(self) -> str:
        """Gets the normalization_scaling of this DatacleaningBody.


        :return: The normalization_scaling of this DatacleaningBody.
        :rtype: str
        """
        return self._normalization_scaling

    @normalization_scaling.setter
    def normalization_scaling(self, normalization_scaling: str):
        """Sets the normalization_scaling of this DatacleaningBody.


        :param normalization_scaling: The normalization_scaling of this DatacleaningBody.
        :type normalization_scaling: str
        """
        allowed_values = ["min_max", "standard", "robust"]  # noqa: E501
        if normalization_scaling not in allowed_values:
            raise ValueError(
                "Invalid value for `normalization_scaling` ({0}), must be one of {1}"
                .format(normalization_scaling, allowed_values)
            )

        self._normalization_scaling = normalization_scaling
