# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FederatedtrainingSubmitBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, node_id: str=None, weights: List[float]=None, epoch: int=None, metrics: object=None):  # noqa: E501
        """FederatedtrainingSubmitBody - a model defined in Swagger

        :param node_id: The node_id of this FederatedtrainingSubmitBody.  # noqa: E501
        :type node_id: str
        :param weights: The weights of this FederatedtrainingSubmitBody.  # noqa: E501
        :type weights: List[float]
        :param epoch: The epoch of this FederatedtrainingSubmitBody.  # noqa: E501
        :type epoch: int
        :param metrics: The metrics of this FederatedtrainingSubmitBody.  # noqa: E501
        :type metrics: object
        """
        self.swagger_types = {
            'node_id': str,
            'weights': List[float],
            'epoch': int,
            'metrics': object
        }

        self.attribute_map = {
            'node_id': 'node_id',
            'weights': 'weights',
            'epoch': 'epoch',
            'metrics': 'metrics'
        }
        self._node_id = node_id
        self._weights = weights
        self._epoch = epoch
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt) -> 'FederatedtrainingSubmitBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The federatedtraining_submit_body of this FederatedtrainingSubmitBody.  # noqa: E501
        :rtype: FederatedtrainingSubmitBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def node_id(self) -> str:
        """Gets the node_id of this FederatedtrainingSubmitBody.


        :return: The node_id of this FederatedtrainingSubmitBody.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this FederatedtrainingSubmitBody.


        :param node_id: The node_id of this FederatedtrainingSubmitBody.
        :type node_id: str
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")  # noqa: E501

        self._node_id = node_id

    @property
    def weights(self) -> List[float]:
        """Gets the weights of this FederatedtrainingSubmitBody.


        :return: The weights of this FederatedtrainingSubmitBody.
        :rtype: List[float]
        """
        return self._weights

    @weights.setter
    def weights(self, weights: List[float]):
        """Sets the weights of this FederatedtrainingSubmitBody.


        :param weights: The weights of this FederatedtrainingSubmitBody.
        :type weights: List[float]
        """
        if weights is None:
            raise ValueError("Invalid value for `weights`, must not be `None`")  # noqa: E501

        self._weights = weights

    @property
    def epoch(self) -> int:
        """Gets the epoch of this FederatedtrainingSubmitBody.


        :return: The epoch of this FederatedtrainingSubmitBody.
        :rtype: int
        """
        return self._epoch

    @epoch.setter
    def epoch(self, epoch: int):
        """Sets the epoch of this FederatedtrainingSubmitBody.


        :param epoch: The epoch of this FederatedtrainingSubmitBody.
        :type epoch: int
        """

        self._epoch = epoch

    @property
    def metrics(self) -> object:
        """Gets the metrics of this FederatedtrainingSubmitBody.


        :return: The metrics of this FederatedtrainingSubmitBody.
        :rtype: object
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: object):
        """Sets the metrics of this FederatedtrainingSubmitBody.


        :param metrics: The metrics of this FederatedtrainingSubmitBody.
        :type metrics: object
        """

        self._metrics = metrics
