# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.audit_logs_logs import AuditLogsLogs  # noqa: F401,E501
from swagger_server import util


class AuditLogs(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, logs: List[AuditLogsLogs]=None, total_count: int=None, page: int=None, per_page: int=None):  # noqa: E501
        """AuditLogs - a model defined in Swagger

        :param logs: The logs of this AuditLogs.  # noqa: E501
        :type logs: List[AuditLogsLogs]
        :param total_count: The total_count of this AuditLogs.  # noqa: E501
        :type total_count: int
        :param page: The page of this AuditLogs.  # noqa: E501
        :type page: int
        :param per_page: The per_page of this AuditLogs.  # noqa: E501
        :type per_page: int
        """
        self.swagger_types = {
            'logs': List[AuditLogsLogs],
            'total_count': int,
            'page': int,
            'per_page': int
        }

        self.attribute_map = {
            'logs': 'logs',
            'total_count': 'total_count',
            'page': 'page',
            'per_page': 'per_page'
        }
        self._logs = logs
        self._total_count = total_count
        self._page = page
        self._per_page = per_page

    @classmethod
    def from_dict(cls, dikt) -> 'AuditLogs':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuditLogs of this AuditLogs.  # noqa: E501
        :rtype: AuditLogs
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logs(self) -> List[AuditLogsLogs]:
        """Gets the logs of this AuditLogs.


        :return: The logs of this AuditLogs.
        :rtype: List[AuditLogsLogs]
        """
        return self._logs

    @logs.setter
    def logs(self, logs: List[AuditLogsLogs]):
        """Sets the logs of this AuditLogs.


        :param logs: The logs of this AuditLogs.
        :type logs: List[AuditLogsLogs]
        """

        self._logs = logs

    @property
    def total_count(self) -> int:
        """Gets the total_count of this AuditLogs.


        :return: The total_count of this AuditLogs.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count: int):
        """Sets the total_count of this AuditLogs.


        :param total_count: The total_count of this AuditLogs.
        :type total_count: int
        """

        self._total_count = total_count

    @property
    def page(self) -> int:
        """Gets the page of this AuditLogs.


        :return: The page of this AuditLogs.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this AuditLogs.


        :param page: The page of this AuditLogs.
        :type page: int
        """

        self._page = page

    @property
    def per_page(self) -> int:
        """Gets the per_page of this AuditLogs.


        :return: The per_page of this AuditLogs.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page: int):
        """Sets the per_page of this AuditLogs.


        :param per_page: The per_page of this AuditLogs.
        :type per_page: int
        """

        self._per_page = per_page
