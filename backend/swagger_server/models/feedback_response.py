# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class FeedbackResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, status: str=None, acknowledgment: str=None, estimated_timeline: str=None, tracking_id: str=None):  # noqa: E501
        """FeedbackResponse - a model defined in Swagger

        :param id: The id of this FeedbackResponse.  # noqa: E501
        :type id: str
        :param status: The status of this FeedbackResponse.  # noqa: E501
        :type status: str
        :param acknowledgment: The acknowledgment of this FeedbackResponse.  # noqa: E501
        :type acknowledgment: str
        :param estimated_timeline: The estimated_timeline of this FeedbackResponse.  # noqa: E501
        :type estimated_timeline: str
        :param tracking_id: The tracking_id of this FeedbackResponse.  # noqa: E501
        :type tracking_id: str
        """
        self.swagger_types = {
            'id': str,
            'status': str,
            'acknowledgment': str,
            'estimated_timeline': str,
            'tracking_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status',
            'acknowledgment': 'acknowledgment',
            'estimated_timeline': 'estimated_timeline',
            'tracking_id': 'tracking_id'
        }
        self._id = id
        self._status = status
        self._acknowledgment = acknowledgment
        self._estimated_timeline = estimated_timeline
        self._tracking_id = tracking_id

    @classmethod
    def from_dict(cls, dikt) -> 'FeedbackResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeedbackResponse of this FeedbackResponse.  # noqa: E501
        :rtype: FeedbackResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this FeedbackResponse.


        :return: The id of this FeedbackResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this FeedbackResponse.


        :param id: The id of this FeedbackResponse.
        :type id: str
        """

        self._id = id

    @property
    def status(self) -> str:
        """Gets the status of this FeedbackResponse.


        :return: The status of this FeedbackResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this FeedbackResponse.


        :param status: The status of this FeedbackResponse.
        :type status: str
        """
        allowed_values = ["submitted", "under_review", "in_progress", "completed", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def acknowledgment(self) -> str:
        """Gets the acknowledgment of this FeedbackResponse.


        :return: The acknowledgment of this FeedbackResponse.
        :rtype: str
        """
        return self._acknowledgment

    @acknowledgment.setter
    def acknowledgment(self, acknowledgment: str):
        """Sets the acknowledgment of this FeedbackResponse.


        :param acknowledgment: The acknowledgment of this FeedbackResponse.
        :type acknowledgment: str
        """

        self._acknowledgment = acknowledgment

    @property
    def estimated_timeline(self) -> str:
        """Gets the estimated_timeline of this FeedbackResponse.


        :return: The estimated_timeline of this FeedbackResponse.
        :rtype: str
        """
        return self._estimated_timeline

    @estimated_timeline.setter
    def estimated_timeline(self, estimated_timeline: str):
        """Sets the estimated_timeline of this FeedbackResponse.


        :param estimated_timeline: The estimated_timeline of this FeedbackResponse.
        :type estimated_timeline: str
        """

        self._estimated_timeline = estimated_timeline

    @property
    def tracking_id(self) -> str:
        """Gets the tracking_id of this FeedbackResponse.


        :return: The tracking_id of this FeedbackResponse.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id: str):
        """Sets the tracking_id of this FeedbackResponse.


        :param tracking_id: The tracking_id of this FeedbackResponse.
        :type tracking_id: str
        """

        self._tracking_id = tracking_id
