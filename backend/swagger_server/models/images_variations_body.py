# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ImagesVariationsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, image: str=None, n: int=1, size: str=None):  # noqa: E501
        """ImagesVariationsBody - a model defined in Swagger

        :param image: The image of this ImagesVariationsBody.  # noqa: E501
        :type image: str
        :param n: The n of this ImagesVariationsBody.  # noqa: E501
        :type n: int
        :param size: The size of this ImagesVariationsBody.  # noqa: E501
        :type size: str
        """
        self.swagger_types = {
            'image': str,
            'n': int,
            'size': str
        }

        self.attribute_map = {
            'image': 'image',
            'n': 'n',
            'size': 'size'
        }
        self._image = image
        self._n = n
        self._size = size

    @classmethod
    def from_dict(cls, dikt) -> 'ImagesVariationsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The images_variations_body of this ImagesVariationsBody.  # noqa: E501
        :rtype: ImagesVariationsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self) -> str:
        """Gets the image of this ImagesVariationsBody.


        :return: The image of this ImagesVariationsBody.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this ImagesVariationsBody.


        :param image: The image of this ImagesVariationsBody.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def n(self) -> int:
        """Gets the n of this ImagesVariationsBody.


        :return: The n of this ImagesVariationsBody.
        :rtype: int
        """
        return self._n

    @n.setter
    def n(self, n: int):
        """Sets the n of this ImagesVariationsBody.


        :param n: The n of this ImagesVariationsBody.
        :type n: int
        """

        self._n = n

    @property
    def size(self) -> str:
        """Gets the size of this ImagesVariationsBody.


        :return: The size of this ImagesVariationsBody.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size: str):
        """Sets the size of this ImagesVariationsBody.


        :param size: The size of this ImagesVariationsBody.
        :type size: str
        """
        allowed_values = ["256x256", "512x512", "1024x1024"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size
