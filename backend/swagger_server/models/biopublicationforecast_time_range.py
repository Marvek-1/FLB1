# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BiopublicationforecastTimeRange(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, start_year: int=None, end_year: int=None):  # noqa: E501
        """BiopublicationforecastTimeRange - a model defined in Swagger

        :param start_year: The start_year of this BiopublicationforecastTimeRange.  # noqa: E501
        :type start_year: int
        :param end_year: The end_year of this BiopublicationforecastTimeRange.  # noqa: E501
        :type end_year: int
        """
        self.swagger_types = {
            'start_year': int,
            'end_year': int
        }

        self.attribute_map = {
            'start_year': 'start_year',
            'end_year': 'end_year'
        }
        self._start_year = start_year
        self._end_year = end_year

    @classmethod
    def from_dict(cls, dikt) -> 'BiopublicationforecastTimeRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The biopublicationforecast_time_range of this BiopublicationforecastTimeRange.  # noqa: E501
        :rtype: BiopublicationforecastTimeRange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_year(self) -> int:
        """Gets the start_year of this BiopublicationforecastTimeRange.


        :return: The start_year of this BiopublicationforecastTimeRange.
        :rtype: int
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year: int):
        """Sets the start_year of this BiopublicationforecastTimeRange.


        :param start_year: The start_year of this BiopublicationforecastTimeRange.
        :type start_year: int
        """

        self._start_year = start_year

    @property
    def end_year(self) -> int:
        """Gets the end_year of this BiopublicationforecastTimeRange.


        :return: The end_year of this BiopublicationforecastTimeRange.
        :rtype: int
        """
        return self._end_year

    @end_year.setter
    def end_year(self, end_year: int):
        """Sets the end_year of this BiopublicationforecastTimeRange.


        :param end_year: The end_year of this BiopublicationforecastTimeRange.
        :type end_year: int
        """

        self._end_year = end_year
