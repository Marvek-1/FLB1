# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.transcription_response_segments import TranscriptionResponseSegments  # noqa: F401,E501
from swagger_server import util


class TranscriptionResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, text: str=None, language: str=None, duration: float=None, segments: List[TranscriptionResponseSegments]=None):  # noqa: E501
        """TranscriptionResponse - a model defined in Swagger

        :param text: The text of this TranscriptionResponse.  # noqa: E501
        :type text: str
        :param language: The language of this TranscriptionResponse.  # noqa: E501
        :type language: str
        :param duration: The duration of this TranscriptionResponse.  # noqa: E501
        :type duration: float
        :param segments: The segments of this TranscriptionResponse.  # noqa: E501
        :type segments: List[TranscriptionResponseSegments]
        """
        self.swagger_types = {
            'text': str,
            'language': str,
            'duration': float,
            'segments': List[TranscriptionResponseSegments]
        }

        self.attribute_map = {
            'text': 'text',
            'language': 'language',
            'duration': 'duration',
            'segments': 'segments'
        }
        self._text = text
        self._language = language
        self._duration = duration
        self._segments = segments

    @classmethod
    def from_dict(cls, dikt) -> 'TranscriptionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TranscriptionResponse of this TranscriptionResponse.  # noqa: E501
        :rtype: TranscriptionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def text(self) -> str:
        """Gets the text of this TranscriptionResponse.


        :return: The text of this TranscriptionResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this TranscriptionResponse.


        :param text: The text of this TranscriptionResponse.
        :type text: str
        """

        self._text = text

    @property
    def language(self) -> str:
        """Gets the language of this TranscriptionResponse.


        :return: The language of this TranscriptionResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this TranscriptionResponse.


        :param language: The language of this TranscriptionResponse.
        :type language: str
        """

        self._language = language

    @property
    def duration(self) -> float:
        """Gets the duration of this TranscriptionResponse.


        :return: The duration of this TranscriptionResponse.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration: float):
        """Sets the duration of this TranscriptionResponse.


        :param duration: The duration of this TranscriptionResponse.
        :type duration: float
        """

        self._duration = duration

    @property
    def segments(self) -> List[TranscriptionResponseSegments]:
        """Gets the segments of this TranscriptionResponse.


        :return: The segments of this TranscriptionResponse.
        :rtype: List[TranscriptionResponseSegments]
        """
        return self._segments

    @segments.setter
    def segments(self, segments: List[TranscriptionResponseSegments]):
        """Sets the segments of this TranscriptionResponse.


        :param segments: The segments of this TranscriptionResponse.
        :type segments: List[TranscriptionResponseSegments]
        """

        self._segments = segments
