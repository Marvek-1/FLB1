# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.chat_completion_response_choices import ChatCompletionResponseChoices  # noqa: F401,E501
from swagger_server.models.chat_completion_response_usage import ChatCompletionResponseUsage  # noqa: F401,E501
from swagger_server import util


class ChatCompletionResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, object: str=None, created: int=None, model: str=None, choices: List[ChatCompletionResponseChoices]=None, usage: ChatCompletionResponseUsage=None):  # noqa: E501
        """ChatCompletionResponse - a model defined in Swagger

        :param id: The id of this ChatCompletionResponse.  # noqa: E501
        :type id: str
        :param object: The object of this ChatCompletionResponse.  # noqa: E501
        :type object: str
        :param created: The created of this ChatCompletionResponse.  # noqa: E501
        :type created: int
        :param model: The model of this ChatCompletionResponse.  # noqa: E501
        :type model: str
        :param choices: The choices of this ChatCompletionResponse.  # noqa: E501
        :type choices: List[ChatCompletionResponseChoices]
        :param usage: The usage of this ChatCompletionResponse.  # noqa: E501
        :type usage: ChatCompletionResponseUsage
        """
        self.swagger_types = {
            'id': str,
            'object': str,
            'created': int,
            'model': str,
            'choices': List[ChatCompletionResponseChoices],
            'usage': ChatCompletionResponseUsage
        }

        self.attribute_map = {
            'id': 'id',
            'object': 'object',
            'created': 'created',
            'model': 'model',
            'choices': 'choices',
            'usage': 'usage'
        }
        self._id = id
        self._object = object
        self._created = created
        self._model = model
        self._choices = choices
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt) -> 'ChatCompletionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ChatCompletionResponse of this ChatCompletionResponse.  # noqa: E501
        :rtype: ChatCompletionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ChatCompletionResponse.


        :return: The id of this ChatCompletionResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ChatCompletionResponse.


        :param id: The id of this ChatCompletionResponse.
        :type id: str
        """

        self._id = id

    @property
    def object(self) -> str:
        """Gets the object of this ChatCompletionResponse.


        :return: The object of this ChatCompletionResponse.
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object: str):
        """Sets the object of this ChatCompletionResponse.


        :param object: The object of this ChatCompletionResponse.
        :type object: str
        """
        allowed_values = ["chat.completion"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def created(self) -> int:
        """Gets the created of this ChatCompletionResponse.


        :return: The created of this ChatCompletionResponse.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created: int):
        """Sets the created of this ChatCompletionResponse.


        :param created: The created of this ChatCompletionResponse.
        :type created: int
        """

        self._created = created

    @property
    def model(self) -> str:
        """Gets the model of this ChatCompletionResponse.


        :return: The model of this ChatCompletionResponse.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model: str):
        """Sets the model of this ChatCompletionResponse.


        :param model: The model of this ChatCompletionResponse.
        :type model: str
        """

        self._model = model

    @property
    def choices(self) -> List[ChatCompletionResponseChoices]:
        """Gets the choices of this ChatCompletionResponse.


        :return: The choices of this ChatCompletionResponse.
        :rtype: List[ChatCompletionResponseChoices]
        """
        return self._choices

    @choices.setter
    def choices(self, choices: List[ChatCompletionResponseChoices]):
        """Sets the choices of this ChatCompletionResponse.


        :param choices: The choices of this ChatCompletionResponse.
        :type choices: List[ChatCompletionResponseChoices]
        """

        self._choices = choices

    @property
    def usage(self) -> ChatCompletionResponseUsage:
        """Gets the usage of this ChatCompletionResponse.


        :return: The usage of this ChatCompletionResponse.
        :rtype: ChatCompletionResponseUsage
        """
        return self._usage

    @usage.setter
    def usage(self, usage: ChatCompletionResponseUsage):
        """Sets the usage of this ChatCompletionResponse.


        :param usage: The usage of this ChatCompletionResponse.
        :type usage: ChatCompletionResponseUsage
        """

        self._usage = usage
