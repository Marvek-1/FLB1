# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class HypothesisResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, valid: bool=None, confidence: float=None, reasoning_chain: List[str]=None, supporting_evidence: List[str]=None, contradicting_evidence: List[str]=None):  # noqa: E501
        """HypothesisResponse - a model defined in Swagger

        :param valid: The valid of this HypothesisResponse.  # noqa: E501
        :type valid: bool
        :param confidence: The confidence of this HypothesisResponse.  # noqa: E501
        :type confidence: float
        :param reasoning_chain: The reasoning_chain of this HypothesisResponse.  # noqa: E501
        :type reasoning_chain: List[str]
        :param supporting_evidence: The supporting_evidence of this HypothesisResponse.  # noqa: E501
        :type supporting_evidence: List[str]
        :param contradicting_evidence: The contradicting_evidence of this HypothesisResponse.  # noqa: E501
        :type contradicting_evidence: List[str]
        """
        self.swagger_types = {
            'valid': bool,
            'confidence': float,
            'reasoning_chain': List[str],
            'supporting_evidence': List[str],
            'contradicting_evidence': List[str]
        }

        self.attribute_map = {
            'valid': 'valid',
            'confidence': 'confidence',
            'reasoning_chain': 'reasoning_chain',
            'supporting_evidence': 'supporting_evidence',
            'contradicting_evidence': 'contradicting_evidence'
        }
        self._valid = valid
        self._confidence = confidence
        self._reasoning_chain = reasoning_chain
        self._supporting_evidence = supporting_evidence
        self._contradicting_evidence = contradicting_evidence

    @classmethod
    def from_dict(cls, dikt) -> 'HypothesisResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HypothesisResponse of this HypothesisResponse.  # noqa: E501
        :rtype: HypothesisResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def valid(self) -> bool:
        """Gets the valid of this HypothesisResponse.


        :return: The valid of this HypothesisResponse.
        :rtype: bool
        """
        return self._valid

    @valid.setter
    def valid(self, valid: bool):
        """Sets the valid of this HypothesisResponse.


        :param valid: The valid of this HypothesisResponse.
        :type valid: bool
        """

        self._valid = valid

    @property
    def confidence(self) -> float:
        """Gets the confidence of this HypothesisResponse.


        :return: The confidence of this HypothesisResponse.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence: float):
        """Sets the confidence of this HypothesisResponse.


        :param confidence: The confidence of this HypothesisResponse.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def reasoning_chain(self) -> List[str]:
        """Gets the reasoning_chain of this HypothesisResponse.


        :return: The reasoning_chain of this HypothesisResponse.
        :rtype: List[str]
        """
        return self._reasoning_chain

    @reasoning_chain.setter
    def reasoning_chain(self, reasoning_chain: List[str]):
        """Sets the reasoning_chain of this HypothesisResponse.


        :param reasoning_chain: The reasoning_chain of this HypothesisResponse.
        :type reasoning_chain: List[str]
        """

        self._reasoning_chain = reasoning_chain

    @property
    def supporting_evidence(self) -> List[str]:
        """Gets the supporting_evidence of this HypothesisResponse.


        :return: The supporting_evidence of this HypothesisResponse.
        :rtype: List[str]
        """
        return self._supporting_evidence

    @supporting_evidence.setter
    def supporting_evidence(self, supporting_evidence: List[str]):
        """Sets the supporting_evidence of this HypothesisResponse.


        :param supporting_evidence: The supporting_evidence of this HypothesisResponse.
        :type supporting_evidence: List[str]
        """

        self._supporting_evidence = supporting_evidence

    @property
    def contradicting_evidence(self) -> List[str]:
        """Gets the contradicting_evidence of this HypothesisResponse.


        :return: The contradicting_evidence of this HypothesisResponse.
        :rtype: List[str]
        """
        return self._contradicting_evidence

    @contradicting_evidence.setter
    def contradicting_evidence(self, contradicting_evidence: List[str]):
        """Sets the contradicting_evidence of this HypothesisResponse.


        :param contradicting_evidence: The contradicting_evidence of this HypothesisResponse.
        :type contradicting_evidence: List[str]
        """

        self._contradicting_evidence = contradicting_evidence
