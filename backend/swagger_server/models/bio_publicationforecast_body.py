# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.biopublicationforecast_time_range import BiopublicationforecastTimeRange  # noqa: F401,E501
from swagger_server import util


class BioPublicationforecastBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, subfield: str=None, citation_sources: List[str]=None, time_range: BiopublicationforecastTimeRange=None):  # noqa: E501
        """BioPublicationforecastBody - a model defined in Swagger

        :param subfield: The subfield of this BioPublicationforecastBody.  # noqa: E501
        :type subfield: str
        :param citation_sources: The citation_sources of this BioPublicationforecastBody.  # noqa: E501
        :type citation_sources: List[str]
        :param time_range: The time_range of this BioPublicationforecastBody.  # noqa: E501
        :type time_range: BiopublicationforecastTimeRange
        """
        self.swagger_types = {
            'subfield': str,
            'citation_sources': List[str],
            'time_range': BiopublicationforecastTimeRange
        }

        self.attribute_map = {
            'subfield': 'subfield',
            'citation_sources': 'citation_sources',
            'time_range': 'time_range'
        }
        self._subfield = subfield
        self._citation_sources = citation_sources
        self._time_range = time_range

    @classmethod
    def from_dict(cls, dikt) -> 'BioPublicationforecastBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The bio_publicationforecast_body of this BioPublicationforecastBody.  # noqa: E501
        :rtype: BioPublicationforecastBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subfield(self) -> str:
        """Gets the subfield of this BioPublicationforecastBody.


        :return: The subfield of this BioPublicationforecastBody.
        :rtype: str
        """
        return self._subfield

    @subfield.setter
    def subfield(self, subfield: str):
        """Sets the subfield of this BioPublicationforecastBody.


        :param subfield: The subfield of this BioPublicationforecastBody.
        :type subfield: str
        """
        allowed_values = ["genomics", "systems_biology", "proteomics", "structural_bioinformatics"]  # noqa: E501
        if subfield not in allowed_values:
            raise ValueError(
                "Invalid value for `subfield` ({0}), must be one of {1}"
                .format(subfield, allowed_values)
            )

        self._subfield = subfield

    @property
    def citation_sources(self) -> List[str]:
        """Gets the citation_sources of this BioPublicationforecastBody.


        :return: The citation_sources of this BioPublicationforecastBody.
        :rtype: List[str]
        """
        return self._citation_sources

    @citation_sources.setter
    def citation_sources(self, citation_sources: List[str]):
        """Sets the citation_sources of this BioPublicationforecastBody.


        :param citation_sources: The citation_sources of this BioPublicationforecastBody.
        :type citation_sources: List[str]
        """

        self._citation_sources = citation_sources

    @property
    def time_range(self) -> BiopublicationforecastTimeRange:
        """Gets the time_range of this BioPublicationforecastBody.


        :return: The time_range of this BioPublicationforecastBody.
        :rtype: BiopublicationforecastTimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range: BiopublicationforecastTimeRange):
        """Sets the time_range of this BioPublicationforecastBody.


        :param time_range: The time_range of this BioPublicationforecastBody.
        :type time_range: BiopublicationforecastTimeRange
        """

        self._time_range = time_range
