# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SecurityEnhancedBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, security_level: str=None, measures: List[str]=None):  # noqa: E501
        """SecurityEnhancedBody - a model defined in Swagger

        :param security_level: The security_level of this SecurityEnhancedBody.  # noqa: E501
        :type security_level: str
        :param measures: The measures of this SecurityEnhancedBody.  # noqa: E501
        :type measures: List[str]
        """
        self.swagger_types = {
            'security_level': str,
            'measures': List[str]
        }

        self.attribute_map = {
            'security_level': 'security_level',
            'measures': 'measures'
        }
        self._security_level = security_level
        self._measures = measures

    @classmethod
    def from_dict(cls, dikt) -> 'SecurityEnhancedBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The security_enhanced_body of this SecurityEnhancedBody.  # noqa: E501
        :rtype: SecurityEnhancedBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def security_level(self) -> str:
        """Gets the security_level of this SecurityEnhancedBody.


        :return: The security_level of this SecurityEnhancedBody.
        :rtype: str
        """
        return self._security_level

    @security_level.setter
    def security_level(self, security_level: str):
        """Sets the security_level of this SecurityEnhancedBody.


        :param security_level: The security_level of this SecurityEnhancedBody.
        :type security_level: str
        """
        allowed_values = ["low", "medium", "high", "maximum"]  # noqa: E501
        if security_level not in allowed_values:
            raise ValueError(
                "Invalid value for `security_level` ({0}), must be one of {1}"
                .format(security_level, allowed_values)
            )

        self._security_level = security_level

    @property
    def measures(self) -> List[str]:
        """Gets the measures of this SecurityEnhancedBody.


        :return: The measures of this SecurityEnhancedBody.
        :rtype: List[str]
        """
        return self._measures

    @measures.setter
    def measures(self, measures: List[str]):
        """Sets the measures of this SecurityEnhancedBody.


        :param measures: The measures of this SecurityEnhancedBody.
        :type measures: List[str]
        """

        self._measures = measures
