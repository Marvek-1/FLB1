# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GlobalModelMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, training_rounds: int=None, participating_nodes: List[str]=None, performance_metrics: object=None):  # noqa: E501
        """GlobalModelMetadata - a model defined in Swagger

        :param training_rounds: The training_rounds of this GlobalModelMetadata.  # noqa: E501
        :type training_rounds: int
        :param participating_nodes: The participating_nodes of this GlobalModelMetadata.  # noqa: E501
        :type participating_nodes: List[str]
        :param performance_metrics: The performance_metrics of this GlobalModelMetadata.  # noqa: E501
        :type performance_metrics: object
        """
        self.swagger_types = {
            'training_rounds': int,
            'participating_nodes': List[str],
            'performance_metrics': object
        }

        self.attribute_map = {
            'training_rounds': 'training_rounds',
            'participating_nodes': 'participating_nodes',
            'performance_metrics': 'performance_metrics'
        }
        self._training_rounds = training_rounds
        self._participating_nodes = participating_nodes
        self._performance_metrics = performance_metrics

    @classmethod
    def from_dict(cls, dikt) -> 'GlobalModelMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GlobalModel_metadata of this GlobalModelMetadata.  # noqa: E501
        :rtype: GlobalModelMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def training_rounds(self) -> int:
        """Gets the training_rounds of this GlobalModelMetadata.


        :return: The training_rounds of this GlobalModelMetadata.
        :rtype: int
        """
        return self._training_rounds

    @training_rounds.setter
    def training_rounds(self, training_rounds: int):
        """Sets the training_rounds of this GlobalModelMetadata.


        :param training_rounds: The training_rounds of this GlobalModelMetadata.
        :type training_rounds: int
        """

        self._training_rounds = training_rounds

    @property
    def participating_nodes(self) -> List[str]:
        """Gets the participating_nodes of this GlobalModelMetadata.


        :return: The participating_nodes of this GlobalModelMetadata.
        :rtype: List[str]
        """
        return self._participating_nodes

    @participating_nodes.setter
    def participating_nodes(self, participating_nodes: List[str]):
        """Sets the participating_nodes of this GlobalModelMetadata.


        :param participating_nodes: The participating_nodes of this GlobalModelMetadata.
        :type participating_nodes: List[str]
        """

        self._participating_nodes = participating_nodes

    @property
    def performance_metrics(self) -> object:
        """Gets the performance_metrics of this GlobalModelMetadata.


        :return: The performance_metrics of this GlobalModelMetadata.
        :rtype: object
        """
        return self._performance_metrics

    @performance_metrics.setter
    def performance_metrics(self, performance_metrics: object):
        """Sets the performance_metrics of this GlobalModelMetadata.


        :param performance_metrics: The performance_metrics of this GlobalModelMetadata.
        :type performance_metrics: object
        """

        self._performance_metrics = performance_metrics
