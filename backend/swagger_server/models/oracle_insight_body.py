# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class OracleInsightBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, topic: str=None, time_horizon: str=None, confidence_level: float=None):  # noqa: E501
        """OracleInsightBody - a model defined in Swagger

        :param topic: The topic of this OracleInsightBody.  # noqa: E501
        :type topic: str
        :param time_horizon: The time_horizon of this OracleInsightBody.  # noqa: E501
        :type time_horizon: str
        :param confidence_level: The confidence_level of this OracleInsightBody.  # noqa: E501
        :type confidence_level: float
        """
        self.swagger_types = {
            'topic': str,
            'time_horizon': str,
            'confidence_level': float
        }

        self.attribute_map = {
            'topic': 'topic',
            'time_horizon': 'time_horizon',
            'confidence_level': 'confidence_level'
        }
        self._topic = topic
        self._time_horizon = time_horizon
        self._confidence_level = confidence_level

    @classmethod
    def from_dict(cls, dikt) -> 'OracleInsightBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The oracle_insight_body of this OracleInsightBody.  # noqa: E501
        :rtype: OracleInsightBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic(self) -> str:
        """Gets the topic of this OracleInsightBody.


        :return: The topic of this OracleInsightBody.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic: str):
        """Sets the topic of this OracleInsightBody.


        :param topic: The topic of this OracleInsightBody.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501

        self._topic = topic

    @property
    def time_horizon(self) -> str:
        """Gets the time_horizon of this OracleInsightBody.


        :return: The time_horizon of this OracleInsightBody.
        :rtype: str
        """
        return self._time_horizon

    @time_horizon.setter
    def time_horizon(self, time_horizon: str):
        """Sets the time_horizon of this OracleInsightBody.


        :param time_horizon: The time_horizon of this OracleInsightBody.
        :type time_horizon: str
        """
        allowed_values = ["short_term", "medium_term", "long_term"]  # noqa: E501
        if time_horizon not in allowed_values:
            raise ValueError(
                "Invalid value for `time_horizon` ({0}), must be one of {1}"
                .format(time_horizon, allowed_values)
            )

        self._time_horizon = time_horizon

    @property
    def confidence_level(self) -> float:
        """Gets the confidence_level of this OracleInsightBody.


        :return: The confidence_level of this OracleInsightBody.
        :rtype: float
        """
        return self._confidence_level

    @confidence_level.setter
    def confidence_level(self, confidence_level: float):
        """Sets the confidence_level of this OracleInsightBody.


        :param confidence_level: The confidence_level of this OracleInsightBody.
        :type confidence_level: float
        """

        self._confidence_level = confidence_level
