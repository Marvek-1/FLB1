# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class LogicVerifyproofsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, proof: str=None, axioms: List[str]=None, logic_system: str=None):  # noqa: E501
        """LogicVerifyproofsBody - a model defined in Swagger

        :param proof: The proof of this LogicVerifyproofsBody.  # noqa: E501
        :type proof: str
        :param axioms: The axioms of this LogicVerifyproofsBody.  # noqa: E501
        :type axioms: List[str]
        :param logic_system: The logic_system of this LogicVerifyproofsBody.  # noqa: E501
        :type logic_system: str
        """
        self.swagger_types = {
            'proof': str,
            'axioms': List[str],
            'logic_system': str
        }

        self.attribute_map = {
            'proof': 'proof',
            'axioms': 'axioms',
            'logic_system': 'logic_system'
        }
        self._proof = proof
        self._axioms = axioms
        self._logic_system = logic_system

    @classmethod
    def from_dict(cls, dikt) -> 'LogicVerifyproofsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The logic_verifyproofs_body of this LogicVerifyproofsBody.  # noqa: E501
        :rtype: LogicVerifyproofsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def proof(self) -> str:
        """Gets the proof of this LogicVerifyproofsBody.


        :return: The proof of this LogicVerifyproofsBody.
        :rtype: str
        """
        return self._proof

    @proof.setter
    def proof(self, proof: str):
        """Sets the proof of this LogicVerifyproofsBody.


        :param proof: The proof of this LogicVerifyproofsBody.
        :type proof: str
        """

        self._proof = proof

    @property
    def axioms(self) -> List[str]:
        """Gets the axioms of this LogicVerifyproofsBody.


        :return: The axioms of this LogicVerifyproofsBody.
        :rtype: List[str]
        """
        return self._axioms

    @axioms.setter
    def axioms(self, axioms: List[str]):
        """Sets the axioms of this LogicVerifyproofsBody.


        :param axioms: The axioms of this LogicVerifyproofsBody.
        :type axioms: List[str]
        """

        self._axioms = axioms

    @property
    def logic_system(self) -> str:
        """Gets the logic_system of this LogicVerifyproofsBody.


        :return: The logic_system of this LogicVerifyproofsBody.
        :rtype: str
        """
        return self._logic_system

    @logic_system.setter
    def logic_system(self, logic_system: str):
        """Sets the logic_system of this LogicVerifyproofsBody.


        :param logic_system: The logic_system of this LogicVerifyproofsBody.
        :type logic_system: str
        """
        allowed_values = ["propositional", "predicate", "modal"]  # noqa: E501
        if logic_system not in allowed_values:
            raise ValueError(
                "Invalid value for `logic_system` ({0}), must be one of {1}"
                .format(logic_system, allowed_values)
            )

        self._logic_system = logic_system
