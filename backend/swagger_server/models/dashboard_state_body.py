# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DashboardStateBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, widgets: List[object]=None, theme: str=None):  # noqa: E501
        """DashboardStateBody - a model defined in Swagger

        :param widgets: The widgets of this DashboardStateBody.  # noqa: E501
        :type widgets: List[object]
        :param theme: The theme of this DashboardStateBody.  # noqa: E501
        :type theme: str
        """
        self.swagger_types = {
            'widgets': List[object],
            'theme': str
        }

        self.attribute_map = {
            'widgets': 'widgets',
            'theme': 'theme'
        }
        self._widgets = widgets
        self._theme = theme

    @classmethod
    def from_dict(cls, dikt) -> 'DashboardStateBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The dashboard_state_body of this DashboardStateBody.  # noqa: E501
        :rtype: DashboardStateBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def widgets(self) -> List[object]:
        """Gets the widgets of this DashboardStateBody.


        :return: The widgets of this DashboardStateBody.
        :rtype: List[object]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets: List[object]):
        """Sets the widgets of this DashboardStateBody.


        :param widgets: The widgets of this DashboardStateBody.
        :type widgets: List[object]
        """

        self._widgets = widgets

    @property
    def theme(self) -> str:
        """Gets the theme of this DashboardStateBody.


        :return: The theme of this DashboardStateBody.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme: str):
        """Sets the theme of this DashboardStateBody.


        :param theme: The theme of this DashboardStateBody.
        :type theme: str
        """
        allowed_values = ["light", "dark", "auto"]  # noqa: E501
        if theme not in allowed_values:
            raise ValueError(
                "Invalid value for `theme` ({0}), must be one of {1}"
                .format(theme, allowed_values)
            )

        self._theme = theme
